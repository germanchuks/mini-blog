import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/pcg/dist/bitwise.js
var require_bitwise = __commonJS({
  "node_modules/pcg/dist/bitwise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ror32 = exports.ror16 = exports.ror8 = exports.ror = void 0;
    var ror = (numBits) => (shift, value) => (value >>> shift | value << (-shift & numBits - 1)) >>> 0;
    exports.ror = ror;
    exports.ror8 = (0, exports.ror)(8);
    exports.ror16 = (0, exports.ror)(16);
    exports.ror32 = (0, exports.ror)(32);
  }
});

// node_modules/long/umd/index.js
var require_umd = __commonJS({
  "node_modules/long/umd/index.js"(exports, module) {
    var Long = function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = void 0;
      var wasm = null;
      try {
        wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
      } catch (e) {
      }
      function Long2(low, high, unsigned) {
        this.low = low | 0;
        this.high = high | 0;
        this.unsigned = !!unsigned;
      }
      Long2.prototype.__isLong__;
      Object.defineProperty(Long2.prototype, "__isLong__", {
        value: true
      });
      function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
      }
      function ctz32(value) {
        var c = Math.clz32(value & -value);
        return value ? 31 - c : c;
      }
      Long2.isLong = isLong;
      var INT_CACHE = {};
      var UINT_CACHE = {};
      function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
          value >>>= 0;
          if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = fromBits(value, 0, true);
          if (cache)
            UINT_CACHE[value] = obj;
          return obj;
        } else {
          value |= 0;
          if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = fromBits(value, value < 0 ? -1 : 0, false);
          if (cache)
            INT_CACHE[value] = obj;
          return obj;
        }
      }
      Long2.fromInt = fromInt;
      function fromNumber(value, unsigned) {
        if (isNaN(value))
          return unsigned ? UZERO : ZERO;
        if (unsigned) {
          if (value < 0)
            return UZERO;
          if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
        } else {
          if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
          if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
        }
        if (value < 0)
          return fromNumber(-value, unsigned).neg();
        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
      }
      Long2.fromNumber = fromNumber;
      function fromBits(lowBits, highBits, unsigned) {
        return new Long2(lowBits, highBits, unsigned);
      }
      Long2.fromBits = fromBits;
      var pow_dbl = Math.pow;
      function fromString(str, unsigned, radix) {
        if (str.length === 0)
          throw Error("empty string");
        if (typeof unsigned === "number") {
          radix = unsigned;
          unsigned = false;
        } else {
          unsigned = !!unsigned;
        }
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
          return unsigned ? UZERO : ZERO;
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        var p;
        if ((p = str.indexOf("-")) > 0)
          throw Error("interior hyphen");
        else if (p === 0) {
          return fromString(str.substring(1), unsigned, radix).neg();
        }
        var radixToPower = fromNumber(pow_dbl(radix, 8));
        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
          var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
          if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
          } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
          }
        }
        result.unsigned = unsigned;
        return result;
      }
      Long2.fromString = fromString;
      function fromValue(val, unsigned) {
        if (typeof val === "number")
          return fromNumber(val, unsigned);
        if (typeof val === "string")
          return fromString(val, unsigned);
        return fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
      }
      Long2.fromValue = fromValue;
      var TWO_PWR_16_DBL = 1 << 16;
      var TWO_PWR_24_DBL = 1 << 24;
      var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
      var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
      var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
      var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
      var ZERO = fromInt(0);
      Long2.ZERO = ZERO;
      var UZERO = fromInt(0, true);
      Long2.UZERO = UZERO;
      var ONE = fromInt(1);
      Long2.ONE = ONE;
      var UONE = fromInt(1, true);
      Long2.UONE = UONE;
      var NEG_ONE = fromInt(-1);
      Long2.NEG_ONE = NEG_ONE;
      var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
      Long2.MAX_VALUE = MAX_VALUE;
      var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
      Long2.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
      var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
      Long2.MIN_VALUE = MIN_VALUE;
      var LongPrototype = Long2.prototype;
      LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
      };
      LongPrototype.toNumber = function toNumber() {
        if (this.unsigned)
          return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
      };
      LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        if (this.isZero())
          return "0";
        if (this.isNegative()) {
          if (this.eq(MIN_VALUE)) {
            var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
          } else
            return "-" + this.neg().toString(radix);
        }
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
        var result = "";
        while (true) {
          var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
          rem = remDiv;
          if (rem.isZero())
            return digits + result;
          else {
            while (digits.length < 6)
              digits = "0" + digits;
            result = "" + digits + result;
          }
        }
      };
      LongPrototype.getHighBits = function getHighBits() {
        return this.high;
      };
      LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
      };
      LongPrototype.getLowBits = function getLowBits() {
        return this.low;
      };
      LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
      };
      LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative())
          return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
          if ((val & 1 << bit) != 0)
            break;
        return this.high != 0 ? bit + 33 : bit + 1;
      };
      LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
      };
      LongPrototype.eqz = LongPrototype.isZero;
      LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
      };
      LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
      };
      LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
      };
      LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
      };
      LongPrototype.equals = function equals(other) {
        if (!isLong(other))
          other = fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
          return false;
        return this.high === other.high && this.low === other.low;
      };
      LongPrototype.eq = LongPrototype.equals;
      LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(
          /* validates */
          other
        );
      };
      LongPrototype.neq = LongPrototype.notEquals;
      LongPrototype.ne = LongPrototype.notEquals;
      LongPrototype.lessThan = function lessThan(other) {
        return this.comp(
          /* validates */
          other
        ) < 0;
      };
      LongPrototype.lt = LongPrototype.lessThan;
      LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(
          /* validates */
          other
        ) <= 0;
      };
      LongPrototype.lte = LongPrototype.lessThanOrEqual;
      LongPrototype.le = LongPrototype.lessThanOrEqual;
      LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(
          /* validates */
          other
        ) > 0;
      };
      LongPrototype.gt = LongPrototype.greaterThan;
      LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(
          /* validates */
          other
        ) >= 0;
      };
      LongPrototype.gte = LongPrototype.greaterThanOrEqual;
      LongPrototype.ge = LongPrototype.greaterThanOrEqual;
      LongPrototype.compare = function compare(other) {
        if (!isLong(other))
          other = fromValue(other);
        if (this.eq(other))
          return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
          return -1;
        if (!thisNeg && otherNeg)
          return 1;
        if (!this.unsigned)
          return this.sub(other).isNegative() ? -1 : 1;
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
      };
      LongPrototype.comp = LongPrototype.compare;
      LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE))
          return MIN_VALUE;
        return this.not().add(ONE);
      };
      LongPrototype.neg = LongPrototype.negate;
      LongPrototype.add = function add(addend) {
        if (!isLong(addend))
          addend = fromValue(addend);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 65535;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 + b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend))
          subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
      };
      LongPrototype.sub = LongPrototype.subtract;
      LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero())
          return this;
        if (!isLong(multiplier))
          multiplier = fromValue(multiplier);
        if (wasm) {
          var low = wasm["mul"](this.low, this.high, multiplier.low, multiplier.high);
          return fromBits(low, wasm["get_high"](), this.unsigned);
        }
        if (multiplier.isZero())
          return this.unsigned ? UZERO : ZERO;
        if (this.eq(MIN_VALUE))
          return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE))
          return this.isOdd() ? MIN_VALUE : ZERO;
        if (this.isNegative()) {
          if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
          else
            return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
          return this.mul(multiplier.neg()).neg();
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
          return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 65535;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.mul = LongPrototype.multiply;
      LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor))
          divisor = fromValue(divisor);
        if (divisor.isZero())
          throw Error("division by zero");
        if (wasm) {
          if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
            return this;
          }
          var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(this.low, this.high, divisor.low, divisor.high);
          return fromBits(low, wasm["get_high"](), this.unsigned);
        }
        if (this.isZero())
          return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
          if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
              return MIN_VALUE;
            else if (divisor.eq(MIN_VALUE))
              return ONE;
            else {
              var halfThis = this.shr(1);
              approx = halfThis.div(divisor).shl(1);
              if (approx.eq(ZERO)) {
                return divisor.isNegative() ? ONE : NEG_ONE;
              } else {
                rem = this.sub(divisor.mul(approx));
                res = approx.add(rem.div(divisor));
                return res;
              }
            }
          } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
          if (this.isNegative()) {
            if (divisor.isNegative())
              return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
          } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
          res = ZERO;
        } else {
          if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
          if (divisor.gt(this))
            return UZERO;
          if (divisor.gt(this.shru(1)))
            return UONE;
          res = UZERO;
        }
        rem = this;
        while (rem.gte(divisor)) {
          approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
          var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
          while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
          }
          if (approxRes.isZero())
            approxRes = ONE;
          res = res.add(approxRes);
          rem = rem.sub(approxRem);
        }
        return res;
      };
      LongPrototype.div = LongPrototype.divide;
      LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor))
          divisor = fromValue(divisor);
        if (wasm) {
          var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(this.low, this.high, divisor.low, divisor.high);
          return fromBits(low, wasm["get_high"](), this.unsigned);
        }
        return this.sub(this.div(divisor).mul(divisor));
      };
      LongPrototype.mod = LongPrototype.modulo;
      LongPrototype.rem = LongPrototype.modulo;
      LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
      };
      LongPrototype.countLeadingZeros = function countLeadingZeros() {
        return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
      };
      LongPrototype.clz = LongPrototype.countLeadingZeros;
      LongPrototype.countTrailingZeros = function countTrailingZeros() {
        return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
      };
      LongPrototype.ctz = LongPrototype.countTrailingZeros;
      LongPrototype.and = function and(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
      };
      LongPrototype.or = function or(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
      };
      LongPrototype.xor = function xor(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
      };
      LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
        else
          return fromBits(0, this.low << numBits - 32, this.unsigned);
      };
      LongPrototype.shl = LongPrototype.shiftLeft;
      LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
        else
          return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
      };
      LongPrototype.shr = LongPrototype.shiftRight;
      LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        if (numBits < 32)
          return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);
        if (numBits === 32)
          return fromBits(this.high, 0, this.unsigned);
        return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
      };
      LongPrototype.shru = LongPrototype.shiftRightUnsigned;
      LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
      LongPrototype.rotateLeft = function rotateLeft(numBits) {
        var b;
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        if (numBits === 32)
          return fromBits(this.high, this.low, this.unsigned);
        if (numBits < 32) {
          b = 32 - numBits;
          return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);
        }
        numBits -= 32;
        b = 32 - numBits;
        return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);
      };
      LongPrototype.rotl = LongPrototype.rotateLeft;
      LongPrototype.rotateRight = function rotateRight(numBits) {
        var b;
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        if (numBits === 32)
          return fromBits(this.high, this.low, this.unsigned);
        if (numBits < 32) {
          b = 32 - numBits;
          return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);
        }
        numBits -= 32;
        b = 32 - numBits;
        return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);
      };
      LongPrototype.rotr = LongPrototype.rotateRight;
      LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned)
          return this;
        return fromBits(this.low, this.high, false);
      };
      LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned)
          return this;
        return fromBits(this.low, this.high, true);
      };
      LongPrototype.toBytes = function toBytes(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
      };
      LongPrototype.toBytesLE = function toBytesLE() {
        var hi = this.high, lo = this.low;
        return [lo & 255, lo >>> 8 & 255, lo >>> 16 & 255, lo >>> 24, hi & 255, hi >>> 8 & 255, hi >>> 16 & 255, hi >>> 24];
      };
      LongPrototype.toBytesBE = function toBytesBE() {
        var hi = this.high, lo = this.low;
        return [hi >>> 24, hi >>> 16 & 255, hi >>> 8 & 255, hi & 255, lo >>> 24, lo >>> 16 & 255, lo >>> 8 & 255, lo & 255];
      };
      Long2.fromBytes = function fromBytes(bytes, unsigned, le) {
        return le ? Long2.fromBytesLE(bytes, unsigned) : Long2.fromBytesBE(bytes, unsigned);
      };
      Long2.fromBytesLE = function fromBytesLE(bytes, unsigned) {
        return new Long2(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
      };
      Long2.fromBytesBE = function fromBytesBE(bytes, unsigned) {
        return new Long2(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
      };
      var _default = Long2;
      exports2.default = _default;
      return "default" in exports2 ? exports2.default : exports2;
    }({});
    if (typeof define === "function" && define.amd)
      define([], function() {
        return Long;
      });
    else if (typeof module === "object" && typeof exports === "object")
      module.exports = Long;
  }
});

// node_modules/pcg/dist/types.js
var require_types = __commonJS({
  "node_modules/pcg/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StreamScheme = exports.OutputFnType = void 0;
    var OutputFnType;
    (function(OutputFnType2) {
      OutputFnType2[OutputFnType2["XSH_RR"] = 0] = "XSH_RR";
    })(OutputFnType = exports.OutputFnType || (exports.OutputFnType = {}));
    var StreamScheme;
    (function(StreamScheme2) {
      StreamScheme2[StreamScheme2["SETSEQ"] = 0] = "SETSEQ";
      StreamScheme2[StreamScheme2["ONESEQ"] = 1] = "ONESEQ";
      StreamScheme2[StreamScheme2["MCG"] = 3] = "MCG";
    })(StreamScheme = exports.StreamScheme || (exports.StreamScheme = {}));
  }
});

// node_modules/pcg/dist/defaults.js
var require_defaults = __commonJS({
  "node_modules/pcg/dist/defaults.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pcgDefaultStreamScheme = exports.pcgDefaultOutputFnType = exports.pcgDefaultMultiplier64 = exports.pcgDefaultIncrement64 = void 0;
    var long_1 = __importDefault(require_umd());
    var types_1 = require_types();
    exports.pcgDefaultIncrement64 = long_1.default.fromString("1442695040888963407", true);
    exports.pcgDefaultMultiplier64 = long_1.default.fromString("6364136223846793005", true);
    exports.pcgDefaultOutputFnType = types_1.OutputFnType.XSH_RR;
    exports.pcgDefaultStreamScheme = types_1.StreamScheme.SETSEQ;
  }
});

// node_modules/ramda/src/F.js
var require_F = __commonJS({
  "node_modules/ramda/src/F.js"(exports, module) {
    var F = function() {
      return false;
    };
    module.exports = F;
  }
});

// node_modules/ramda/src/T.js
var require_T = __commonJS({
  "node_modules/ramda/src/T.js"(exports, module) {
    var T = function() {
      return true;
    };
    module.exports = T;
  }
});

// node_modules/ramda/src/__.js
var require__ = __commonJS({
  "node_modules/ramda/src/__.js"(exports, module) {
    module.exports = {
      "@@functional/placeholder": true
    };
  }
});

// node_modules/ramda/src/internal/_isPlaceholder.js
var require_isPlaceholder = __commonJS({
  "node_modules/ramda/src/internal/_isPlaceholder.js"(exports, module) {
    function _isPlaceholder(a) {
      return a != null && typeof a === "object" && a["@@functional/placeholder"] === true;
    }
    module.exports = _isPlaceholder;
  }
});

// node_modules/ramda/src/internal/_curry1.js
var require_curry1 = __commonJS({
  "node_modules/ramda/src/internal/_curry1.js"(exports, module) {
    var _isPlaceholder = require_isPlaceholder();
    function _curry1(fn) {
      return function f1(a) {
        if (arguments.length === 0 || _isPlaceholder(a)) {
          return f1;
        } else {
          return fn.apply(this, arguments);
        }
      };
    }
    module.exports = _curry1;
  }
});

// node_modules/ramda/src/internal/_curry2.js
var require_curry2 = __commonJS({
  "node_modules/ramda/src/internal/_curry2.js"(exports, module) {
    var _curry1 = require_curry1();
    var _isPlaceholder = require_isPlaceholder();
    function _curry2(fn) {
      return function f2(a, b) {
        switch (arguments.length) {
          case 0:
            return f2;
          case 1:
            return _isPlaceholder(a) ? f2 : _curry1(function(_b) {
              return fn(a, _b);
            });
          default:
            return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function(_a) {
              return fn(_a, b);
            }) : _isPlaceholder(b) ? _curry1(function(_b) {
              return fn(a, _b);
            }) : fn(a, b);
        }
      };
    }
    module.exports = _curry2;
  }
});

// node_modules/ramda/src/add.js
var require_add = __commonJS({
  "node_modules/ramda/src/add.js"(exports, module) {
    var _curry2 = require_curry2();
    var add = _curry2(function add2(a, b) {
      return Number(a) + Number(b);
    });
    module.exports = add;
  }
});

// node_modules/ramda/src/internal/_concat.js
var require_concat = __commonJS({
  "node_modules/ramda/src/internal/_concat.js"(exports, module) {
    function _concat(set1, set2) {
      set1 = set1 || [];
      set2 = set2 || [];
      var idx;
      var len1 = set1.length;
      var len2 = set2.length;
      var result = [];
      idx = 0;
      while (idx < len1) {
        result[result.length] = set1[idx];
        idx += 1;
      }
      idx = 0;
      while (idx < len2) {
        result[result.length] = set2[idx];
        idx += 1;
      }
      return result;
    }
    module.exports = _concat;
  }
});

// node_modules/ramda/src/internal/_arity.js
var require_arity = __commonJS({
  "node_modules/ramda/src/internal/_arity.js"(exports, module) {
    function _arity(n, fn) {
      switch (n) {
        case 0:
          return function() {
            return fn.apply(this, arguments);
          };
        case 1:
          return function(a0) {
            return fn.apply(this, arguments);
          };
        case 2:
          return function(a0, a1) {
            return fn.apply(this, arguments);
          };
        case 3:
          return function(a0, a1, a2) {
            return fn.apply(this, arguments);
          };
        case 4:
          return function(a0, a1, a2, a3) {
            return fn.apply(this, arguments);
          };
        case 5:
          return function(a0, a1, a2, a3, a4) {
            return fn.apply(this, arguments);
          };
        case 6:
          return function(a0, a1, a2, a3, a4, a5) {
            return fn.apply(this, arguments);
          };
        case 7:
          return function(a0, a1, a2, a3, a4, a5, a6) {
            return fn.apply(this, arguments);
          };
        case 8:
          return function(a0, a1, a2, a3, a4, a5, a6, a7) {
            return fn.apply(this, arguments);
          };
        case 9:
          return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
            return fn.apply(this, arguments);
          };
        case 10:
          return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return fn.apply(this, arguments);
          };
        default:
          throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
      }
    }
    module.exports = _arity;
  }
});

// node_modules/ramda/src/internal/_curryN.js
var require_curryN = __commonJS({
  "node_modules/ramda/src/internal/_curryN.js"(exports, module) {
    var _arity = require_arity();
    var _isPlaceholder = require_isPlaceholder();
    function _curryN(length, received, fn) {
      return function() {
        var combined = [];
        var argsIdx = 0;
        var left = length;
        var combinedIdx = 0;
        while (combinedIdx < received.length || argsIdx < arguments.length) {
          var result;
          if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
            result = received[combinedIdx];
          } else {
            result = arguments[argsIdx];
            argsIdx += 1;
          }
          combined[combinedIdx] = result;
          if (!_isPlaceholder(result)) {
            left -= 1;
          }
          combinedIdx += 1;
        }
        return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
      };
    }
    module.exports = _curryN;
  }
});

// node_modules/ramda/src/curryN.js
var require_curryN2 = __commonJS({
  "node_modules/ramda/src/curryN.js"(exports, module) {
    var _arity = require_arity();
    var _curry1 = require_curry1();
    var _curry2 = require_curry2();
    var _curryN = require_curryN();
    var curryN = _curry2(function curryN2(length, fn) {
      if (length === 1) {
        return _curry1(fn);
      }
      return _arity(length, _curryN(length, [], fn));
    });
    module.exports = curryN;
  }
});

// node_modules/ramda/src/addIndex.js
var require_addIndex = __commonJS({
  "node_modules/ramda/src/addIndex.js"(exports, module) {
    var _concat = require_concat();
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var addIndex = _curry1(function addIndex2(fn) {
      return curryN(fn.length, function() {
        var idx = 0;
        var origFn = arguments[0];
        var list = arguments[arguments.length - 1];
        var args = Array.prototype.slice.call(arguments, 0);
        args[0] = function() {
          var result = origFn.apply(this, _concat(arguments, [idx, list]));
          idx += 1;
          return result;
        };
        return fn.apply(this, args);
      });
    });
    module.exports = addIndex;
  }
});

// node_modules/ramda/src/addIndexRight.js
var require_addIndexRight = __commonJS({
  "node_modules/ramda/src/addIndexRight.js"(exports, module) {
    var _concat = require_concat();
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var addIndexRight = _curry1(function addIndex(fn) {
      return curryN(fn.length, function() {
        var origFn = arguments[0];
        var list = arguments[arguments.length - 1];
        var idx = list.length - 1;
        var args = Array.prototype.slice.call(arguments, 0);
        args[0] = function() {
          var result = origFn.apply(this, _concat(arguments, [idx, list]));
          idx -= 1;
          return result;
        };
        return fn.apply(this, args);
      });
    });
    module.exports = addIndexRight;
  }
});

// node_modules/ramda/src/internal/_curry3.js
var require_curry3 = __commonJS({
  "node_modules/ramda/src/internal/_curry3.js"(exports, module) {
    var _curry1 = require_curry1();
    var _curry2 = require_curry2();
    var _isPlaceholder = require_isPlaceholder();
    function _curry3(fn) {
      return function f3(a, b, c) {
        switch (arguments.length) {
          case 0:
            return f3;
          case 1:
            return _isPlaceholder(a) ? f3 : _curry2(function(_b, _c) {
              return fn(a, _b, _c);
            });
          case 2:
            return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function(_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder(b) ? _curry2(function(_b, _c) {
              return fn(a, _b, _c);
            }) : _curry1(function(_c) {
              return fn(a, b, _c);
            });
          default:
            return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) {
              return fn(_a, _b, c);
            }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) {
              return fn(a, _b, _c);
            }) : _isPlaceholder(a) ? _curry1(function(_a) {
              return fn(_a, b, c);
            }) : _isPlaceholder(b) ? _curry1(function(_b) {
              return fn(a, _b, c);
            }) : _isPlaceholder(c) ? _curry1(function(_c) {
              return fn(a, b, _c);
            }) : fn(a, b, c);
        }
      };
    }
    module.exports = _curry3;
  }
});

// node_modules/ramda/src/adjust.js
var require_adjust = __commonJS({
  "node_modules/ramda/src/adjust.js"(exports, module) {
    var _concat = require_concat();
    var _curry3 = require_curry3();
    var adjust = _curry3(function adjust2(idx, fn, list) {
      var len = list.length;
      if (idx >= len || idx < -len) {
        return list;
      }
      var _idx = (len + idx) % len;
      var _list = _concat(list);
      _list[_idx] = fn(list[_idx]);
      return _list;
    });
    module.exports = adjust;
  }
});

// node_modules/ramda/src/internal/_isArray.js
var require_isArray = __commonJS({
  "node_modules/ramda/src/internal/_isArray.js"(exports, module) {
    module.exports = Array.isArray || function _isArray(val) {
      return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
    };
  }
});

// node_modules/ramda/src/internal/_isTransformer.js
var require_isTransformer = __commonJS({
  "node_modules/ramda/src/internal/_isTransformer.js"(exports, module) {
    function _isTransformer(obj) {
      return obj != null && typeof obj["@@transducer/step"] === "function";
    }
    module.exports = _isTransformer;
  }
});

// node_modules/ramda/src/internal/_dispatchable.js
var require_dispatchable = __commonJS({
  "node_modules/ramda/src/internal/_dispatchable.js"(exports, module) {
    var _isArray = require_isArray();
    var _isTransformer = require_isTransformer();
    function _dispatchable(methodNames, transducerCreator, fn) {
      return function() {
        if (arguments.length === 0) {
          return fn();
        }
        var obj = arguments[arguments.length - 1];
        if (!_isArray(obj)) {
          var idx = 0;
          while (idx < methodNames.length) {
            if (typeof obj[methodNames[idx]] === "function") {
              return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));
            }
            idx += 1;
          }
          if (_isTransformer(obj)) {
            var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));
            return transducer(obj);
          }
        }
        return fn.apply(this, arguments);
      };
    }
    module.exports = _dispatchable;
  }
});

// node_modules/ramda/src/internal/_reduced.js
var require_reduced = __commonJS({
  "node_modules/ramda/src/internal/_reduced.js"(exports, module) {
    function _reduced(x) {
      return x && x["@@transducer/reduced"] ? x : {
        "@@transducer/value": x,
        "@@transducer/reduced": true
      };
    }
    module.exports = _reduced;
  }
});

// node_modules/ramda/src/internal/_xfBase.js
var require_xfBase = __commonJS({
  "node_modules/ramda/src/internal/_xfBase.js"(exports, module) {
    module.exports = {
      init: function() {
        return this.xf["@@transducer/init"]();
      },
      result: function(result) {
        return this.xf["@@transducer/result"](result);
      }
    };
  }
});

// node_modules/ramda/src/internal/_xall.js
var require_xall = __commonJS({
  "node_modules/ramda/src/internal/_xall.js"(exports, module) {
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XAll = function() {
      function XAll2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.all = true;
      }
      XAll2.prototype["@@transducer/init"] = _xfBase.init;
      XAll2.prototype["@@transducer/result"] = function(result) {
        if (this.all) {
          result = this.xf["@@transducer/step"](result, true);
        }
        return this.xf["@@transducer/result"](result);
      };
      XAll2.prototype["@@transducer/step"] = function(result, input) {
        if (!this.f(input)) {
          this.all = false;
          result = _reduced(this.xf["@@transducer/step"](result, false));
        }
        return result;
      };
      return XAll2;
    }();
    function _xall(f) {
      return function(xf) {
        return new XAll(f, xf);
      };
    }
    module.exports = _xall;
  }
});

// node_modules/ramda/src/all.js
var require_all = __commonJS({
  "node_modules/ramda/src/all.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xall = require_xall();
    var all = _curry2(
      _dispatchable(["all"], _xall, function all2(fn, list) {
        var idx = 0;
        while (idx < list.length) {
          if (!fn(list[idx])) {
            return false;
          }
          idx += 1;
        }
        return true;
      })
    );
    module.exports = all;
  }
});

// node_modules/ramda/src/internal/_arrayFromIterator.js
var require_arrayFromIterator = __commonJS({
  "node_modules/ramda/src/internal/_arrayFromIterator.js"(exports, module) {
    function _arrayFromIterator(iter) {
      var list = [];
      var next;
      while (!(next = iter.next()).done) {
        list.push(next.value);
      }
      return list;
    }
    module.exports = _arrayFromIterator;
  }
});

// node_modules/ramda/src/internal/_includesWith.js
var require_includesWith = __commonJS({
  "node_modules/ramda/src/internal/_includesWith.js"(exports, module) {
    function _includesWith(pred, x, list) {
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        if (pred(x, list[idx])) {
          return true;
        }
        idx += 1;
      }
      return false;
    }
    module.exports = _includesWith;
  }
});

// node_modules/ramda/src/internal/_functionName.js
var require_functionName = __commonJS({
  "node_modules/ramda/src/internal/_functionName.js"(exports, module) {
    function _functionName(f) {
      var match = String(f).match(/^function (\w*)/);
      return match == null ? "" : match[1];
    }
    module.exports = _functionName;
  }
});

// node_modules/ramda/src/internal/_has.js
var require_has = __commonJS({
  "node_modules/ramda/src/internal/_has.js"(exports, module) {
    function _has(prop, obj) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module.exports = _has;
  }
});

// node_modules/ramda/src/internal/_objectIs.js
var require_objectIs = __commonJS({
  "node_modules/ramda/src/internal/_objectIs.js"(exports, module) {
    function _objectIs(a, b) {
      if (a === b) {
        return a !== 0 || 1 / a === 1 / b;
      } else {
        return a !== a && b !== b;
      }
    }
    module.exports = typeof Object.is === "function" ? Object.is : _objectIs;
  }
});

// node_modules/ramda/src/internal/_isArguments.js
var require_isArguments = __commonJS({
  "node_modules/ramda/src/internal/_isArguments.js"(exports, module) {
    var _has = require_has();
    var toString = Object.prototype.toString;
    var _isArguments = function() {
      return toString.call(arguments) === "[object Arguments]" ? function _isArguments2(x) {
        return toString.call(x) === "[object Arguments]";
      } : function _isArguments2(x) {
        return _has("callee", x);
      };
    }();
    module.exports = _isArguments;
  }
});

// node_modules/ramda/src/keys.js
var require_keys = __commonJS({
  "node_modules/ramda/src/keys.js"(exports, module) {
    var _curry1 = require_curry1();
    var _has = require_has();
    var _isArguments = require_isArguments();
    var hasEnumBug = !{
      toString: null
    }.propertyIsEnumerable("toString");
    var nonEnumerableProps = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];
    var hasArgsEnumBug = function() {
      "use strict";
      return arguments.propertyIsEnumerable("length");
    }();
    var contains = function contains2(list, item) {
      var idx = 0;
      while (idx < list.length) {
        if (list[idx] === item) {
          return true;
        }
        idx += 1;
      }
      return false;
    };
    var keys = typeof Object.keys === "function" && !hasArgsEnumBug ? _curry1(function keys2(obj) {
      return Object(obj) !== obj ? [] : Object.keys(obj);
    }) : _curry1(function keys2(obj) {
      if (Object(obj) !== obj) {
        return [];
      }
      var prop, nIdx;
      var ks = [];
      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
      for (prop in obj) {
        if (_has(prop, obj) && (!checkArgsLength || prop !== "length")) {
          ks[ks.length] = prop;
        }
      }
      if (hasEnumBug) {
        nIdx = nonEnumerableProps.length - 1;
        while (nIdx >= 0) {
          prop = nonEnumerableProps[nIdx];
          if (_has(prop, obj) && !contains(ks, prop)) {
            ks[ks.length] = prop;
          }
          nIdx -= 1;
        }
      }
      return ks;
    });
    module.exports = keys;
  }
});

// node_modules/ramda/src/type.js
var require_type = __commonJS({
  "node_modules/ramda/src/type.js"(exports, module) {
    var _curry1 = require_curry1();
    var type = _curry1(function type2(val) {
      return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
    });
    module.exports = type;
  }
});

// node_modules/ramda/src/internal/_equals.js
var require_equals = __commonJS({
  "node_modules/ramda/src/internal/_equals.js"(exports, module) {
    var _arrayFromIterator = require_arrayFromIterator();
    var _includesWith = require_includesWith();
    var _functionName = require_functionName();
    var _has = require_has();
    var _objectIs = require_objectIs();
    var keys = require_keys();
    var type = require_type();
    function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
      var a = _arrayFromIterator(aIterator);
      var b = _arrayFromIterator(bIterator);
      function eq(_a, _b) {
        return _equals(_a, _b, stackA.slice(), stackB.slice());
      }
      return !_includesWith(function(b2, aItem) {
        return !_includesWith(eq, aItem, b2);
      }, b, a);
    }
    function _equals(a, b, stackA, stackB) {
      if (_objectIs(a, b)) {
        return true;
      }
      var typeA = type(a);
      if (typeA !== type(b)) {
        return false;
      }
      if (typeof a["fantasy-land/equals"] === "function" || typeof b["fantasy-land/equals"] === "function") {
        return typeof a["fantasy-land/equals"] === "function" && a["fantasy-land/equals"](b) && typeof b["fantasy-land/equals"] === "function" && b["fantasy-land/equals"](a);
      }
      if (typeof a.equals === "function" || typeof b.equals === "function") {
        return typeof a.equals === "function" && a.equals(b) && typeof b.equals === "function" && b.equals(a);
      }
      switch (typeA) {
        case "Arguments":
        case "Array":
        case "Object":
          if (typeof a.constructor === "function" && _functionName(a.constructor) === "Promise") {
            return a === b;
          }
          break;
        case "Boolean":
        case "Number":
        case "String":
          if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {
            return false;
          }
          break;
        case "Date":
          if (!_objectIs(a.valueOf(), b.valueOf())) {
            return false;
          }
          break;
        case "Error":
          return a.name === b.name && a.message === b.message;
        case "RegExp":
          if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
            return false;
          }
          break;
      }
      var idx = stackA.length - 1;
      while (idx >= 0) {
        if (stackA[idx] === a) {
          return stackB[idx] === b;
        }
        idx -= 1;
      }
      switch (typeA) {
        case "Map":
          if (a.size !== b.size) {
            return false;
          }
          return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
        case "Set":
          if (a.size !== b.size) {
            return false;
          }
          return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
        case "Arguments":
        case "Array":
        case "Object":
        case "Boolean":
        case "Number":
        case "String":
        case "Date":
        case "Error":
        case "RegExp":
        case "Int8Array":
        case "Uint8Array":
        case "Uint8ClampedArray":
        case "Int16Array":
        case "Uint16Array":
        case "Int32Array":
        case "Uint32Array":
        case "Float32Array":
        case "Float64Array":
        case "ArrayBuffer":
          break;
        default:
          return false;
      }
      var keysA = keys(a);
      if (keysA.length !== keys(b).length) {
        return false;
      }
      var extendedStackA = stackA.concat([a]);
      var extendedStackB = stackB.concat([b]);
      idx = keysA.length - 1;
      while (idx >= 0) {
        var key = keysA[idx];
        if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
          return false;
        }
        idx -= 1;
      }
      return true;
    }
    module.exports = _equals;
  }
});

// node_modules/ramda/src/equals.js
var require_equals2 = __commonJS({
  "node_modules/ramda/src/equals.js"(exports, module) {
    var _curry2 = require_curry2();
    var _equals = require_equals();
    var equals = _curry2(function equals2(a, b) {
      return _equals(a, b, [], []);
    });
    module.exports = equals;
  }
});

// node_modules/ramda/src/internal/_indexOf.js
var require_indexOf = __commonJS({
  "node_modules/ramda/src/internal/_indexOf.js"(exports, module) {
    var equals = require_equals2();
    function _indexOf(list, a, idx) {
      var inf, item;
      if (typeof list.indexOf === "function") {
        switch (typeof a) {
          case "number":
            if (a === 0) {
              inf = 1 / a;
              while (idx < list.length) {
                item = list[idx];
                if (item === 0 && 1 / item === inf) {
                  return idx;
                }
                idx += 1;
              }
              return -1;
            } else if (a !== a) {
              while (idx < list.length) {
                item = list[idx];
                if (typeof item === "number" && item !== item) {
                  return idx;
                }
                idx += 1;
              }
              return -1;
            }
            return list.indexOf(a, idx);
          case "string":
          case "boolean":
          case "function":
          case "undefined":
            return list.indexOf(a, idx);
          case "object":
            if (a === null) {
              return list.indexOf(a, idx);
            }
        }
      }
      while (idx < list.length) {
        if (equals(list[idx], a)) {
          return idx;
        }
        idx += 1;
      }
      return -1;
    }
    module.exports = _indexOf;
  }
});

// node_modules/ramda/src/internal/_includes.js
var require_includes = __commonJS({
  "node_modules/ramda/src/internal/_includes.js"(exports, module) {
    var _indexOf = require_indexOf();
    function _includes(a, list) {
      return _indexOf(list, a, 0) >= 0;
    }
    module.exports = _includes;
  }
});

// node_modules/ramda/src/internal/_map.js
var require_map = __commonJS({
  "node_modules/ramda/src/internal/_map.js"(exports, module) {
    function _map(fn, functor) {
      var idx = 0;
      var len = functor.length;
      var result = Array(len);
      while (idx < len) {
        result[idx] = fn(functor[idx]);
        idx += 1;
      }
      return result;
    }
    module.exports = _map;
  }
});

// node_modules/ramda/src/internal/_quote.js
var require_quote = __commonJS({
  "node_modules/ramda/src/internal/_quote.js"(exports, module) {
    function _quote(s) {
      var escaped = s.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
      return '"' + escaped.replace(/"/g, '\\"') + '"';
    }
    module.exports = _quote;
  }
});

// node_modules/ramda/src/internal/_toISOString.js
var require_toISOString = __commonJS({
  "node_modules/ramda/src/internal/_toISOString.js"(exports, module) {
    var pad = function pad2(n) {
      return (n < 10 ? "0" : "") + n;
    };
    var _toISOString = typeof Date.prototype.toISOString === "function" ? function _toISOString2(d) {
      return d.toISOString();
    } : function _toISOString2(d) {
      return d.getUTCFullYear() + "-" + pad(d.getUTCMonth() + 1) + "-" + pad(d.getUTCDate()) + "T" + pad(d.getUTCHours()) + ":" + pad(d.getUTCMinutes()) + ":" + pad(d.getUTCSeconds()) + "." + (d.getUTCMilliseconds() / 1e3).toFixed(3).slice(2, 5) + "Z";
    };
    module.exports = _toISOString;
  }
});

// node_modules/ramda/src/internal/_complement.js
var require_complement = __commonJS({
  "node_modules/ramda/src/internal/_complement.js"(exports, module) {
    function _complement(f) {
      return function() {
        return !f.apply(this, arguments);
      };
    }
    module.exports = _complement;
  }
});

// node_modules/ramda/src/internal/_arrayReduce.js
var require_arrayReduce = __commonJS({
  "node_modules/ramda/src/internal/_arrayReduce.js"(exports, module) {
    function _arrayReduce(reducer, acc, list) {
      var index = 0;
      var length = list.length;
      while (index < length) {
        acc = reducer(acc, list[index]);
        index += 1;
      }
      return acc;
    }
    module.exports = _arrayReduce;
  }
});

// node_modules/ramda/src/internal/_filter.js
var require_filter = __commonJS({
  "node_modules/ramda/src/internal/_filter.js"(exports, module) {
    function _filter(fn, list) {
      var idx = 0;
      var len = list.length;
      var result = [];
      while (idx < len) {
        if (fn(list[idx])) {
          result[result.length] = list[idx];
        }
        idx += 1;
      }
      return result;
    }
    module.exports = _filter;
  }
});

// node_modules/ramda/src/internal/_isObject.js
var require_isObject = __commonJS({
  "node_modules/ramda/src/internal/_isObject.js"(exports, module) {
    function _isObject(x) {
      return Object.prototype.toString.call(x) === "[object Object]";
    }
    module.exports = _isObject;
  }
});

// node_modules/ramda/src/internal/_xfilter.js
var require_xfilter = __commonJS({
  "node_modules/ramda/src/internal/_xfilter.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XFilter = function() {
      function XFilter2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XFilter2.prototype["@@transducer/init"] = _xfBase.init;
      XFilter2.prototype["@@transducer/result"] = _xfBase.result;
      XFilter2.prototype["@@transducer/step"] = function(result, input) {
        return this.f(input) ? this.xf["@@transducer/step"](result, input) : result;
      };
      return XFilter2;
    }();
    function _xfilter(f) {
      return function(xf) {
        return new XFilter(f, xf);
      };
    }
    module.exports = _xfilter;
  }
});

// node_modules/ramda/src/filter.js
var require_filter2 = __commonJS({
  "node_modules/ramda/src/filter.js"(exports, module) {
    var _arrayReduce = require_arrayReduce();
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _filter = require_filter();
    var _isObject = require_isObject();
    var _xfilter = require_xfilter();
    var keys = require_keys();
    var filter = _curry2(
      _dispatchable(["fantasy-land/filter", "filter"], _xfilter, function(pred, filterable) {
        return _isObject(filterable) ? _arrayReduce(function(acc, key) {
          if (pred(filterable[key])) {
            acc[key] = filterable[key];
          }
          return acc;
        }, {}, keys(filterable)) : (
          // else
          _filter(pred, filterable)
        );
      })
    );
    module.exports = filter;
  }
});

// node_modules/ramda/src/reject.js
var require_reject = __commonJS({
  "node_modules/ramda/src/reject.js"(exports, module) {
    var _complement = require_complement();
    var _curry2 = require_curry2();
    var filter = require_filter2();
    var reject = _curry2(function reject2(pred, filterable) {
      return filter(_complement(pred), filterable);
    });
    module.exports = reject;
  }
});

// node_modules/ramda/src/internal/_toString.js
var require_toString = __commonJS({
  "node_modules/ramda/src/internal/_toString.js"(exports, module) {
    var _includes = require_includes();
    var _map = require_map();
    var _quote = require_quote();
    var _toISOString = require_toISOString();
    var keys = require_keys();
    var reject = require_reject();
    function _toString(x, seen) {
      var recur = function recur2(y) {
        var xs = seen.concat([x]);
        return _includes(y, xs) ? "<Circular>" : _toString(y, xs);
      };
      var mapPairs = function(obj, keys2) {
        return _map(function(k) {
          return _quote(k) + ": " + recur(obj[k]);
        }, keys2.slice().sort());
      };
      switch (Object.prototype.toString.call(x)) {
        case "[object Arguments]":
          return "(function() { return arguments; }(" + _map(recur, x).join(", ") + "))";
        case "[object Array]":
          return "[" + _map(recur, x).concat(mapPairs(x, reject(function(k) {
            return /^\d+$/.test(k);
          }, keys(x)))).join(", ") + "]";
        case "[object Boolean]":
          return typeof x === "object" ? "new Boolean(" + recur(x.valueOf()) + ")" : x.toString();
        case "[object Date]":
          return "new Date(" + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ")";
        case "[object Map]":
          return "new Map(" + recur(Array.from(x)) + ")";
        case "[object Null]":
          return "null";
        case "[object Number]":
          return typeof x === "object" ? "new Number(" + recur(x.valueOf()) + ")" : 1 / x === -Infinity ? "-0" : x.toString(10);
        case "[object Set]":
          return "new Set(" + recur(Array.from(x).sort()) + ")";
        case "[object String]":
          return typeof x === "object" ? "new String(" + recur(x.valueOf()) + ")" : _quote(x);
        case "[object Undefined]":
          return "undefined";
        default:
          if (typeof x.toString === "function") {
            var repr = x.toString();
            if (repr !== "[object Object]") {
              return repr;
            }
          }
          return "{" + mapPairs(x, keys(x)).join(", ") + "}";
      }
    }
    module.exports = _toString;
  }
});

// node_modules/ramda/src/toString.js
var require_toString2 = __commonJS({
  "node_modules/ramda/src/toString.js"(exports, module) {
    var _curry1 = require_curry1();
    var _toString = require_toString();
    var toString = _curry1(function toString2(val) {
      return _toString(val, []);
    });
    module.exports = toString;
  }
});

// node_modules/ramda/src/max.js
var require_max = __commonJS({
  "node_modules/ramda/src/max.js"(exports, module) {
    var _curry2 = require_curry2();
    var toString = require_toString2();
    var max = _curry2(function max2(a, b) {
      if (a === b) {
        return b;
      }
      function safeMax(x, y) {
        if (x > y !== y > x) {
          return y > x ? y : x;
        }
        return void 0;
      }
      var maxByValue = safeMax(a, b);
      if (maxByValue !== void 0) {
        return maxByValue;
      }
      var maxByType = safeMax(typeof a, typeof b);
      if (maxByType !== void 0) {
        return maxByType === typeof a ? a : b;
      }
      var stringA = toString(a);
      var maxByStringValue = safeMax(stringA, toString(b));
      if (maxByStringValue !== void 0) {
        return maxByStringValue === stringA ? a : b;
      }
      return b;
    });
    module.exports = max;
  }
});

// node_modules/ramda/src/internal/_xmap.js
var require_xmap = __commonJS({
  "node_modules/ramda/src/internal/_xmap.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XMap = function() {
      function XMap2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XMap2.prototype["@@transducer/init"] = _xfBase.init;
      XMap2.prototype["@@transducer/result"] = _xfBase.result;
      XMap2.prototype["@@transducer/step"] = function(result, input) {
        return this.xf["@@transducer/step"](result, this.f(input));
      };
      return XMap2;
    }();
    var _xmap = function _xmap2(f) {
      return function(xf) {
        return new XMap(f, xf);
      };
    };
    module.exports = _xmap;
  }
});

// node_modules/ramda/src/map.js
var require_map2 = __commonJS({
  "node_modules/ramda/src/map.js"(exports, module) {
    var _arrayReduce = require_arrayReduce();
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _map = require_map();
    var _xmap = require_xmap();
    var curryN = require_curryN2();
    var keys = require_keys();
    var map = _curry2(
      _dispatchable(["fantasy-land/map", "map"], _xmap, function map2(fn, functor) {
        switch (Object.prototype.toString.call(functor)) {
          case "[object Function]":
            return curryN(functor.length, function() {
              return fn.call(this, functor.apply(this, arguments));
            });
          case "[object Object]":
            return _arrayReduce(function(acc, key) {
              acc[key] = fn(functor[key]);
              return acc;
            }, {}, keys(functor));
          default:
            return _map(fn, functor);
        }
      })
    );
    module.exports = map;
  }
});

// node_modules/ramda/src/internal/_isInteger.js
var require_isInteger = __commonJS({
  "node_modules/ramda/src/internal/_isInteger.js"(exports, module) {
    module.exports = Number.isInteger || function _isInteger(n) {
      return n << 0 === n;
    };
  }
});

// node_modules/ramda/src/internal/_isString.js
var require_isString = __commonJS({
  "node_modules/ramda/src/internal/_isString.js"(exports, module) {
    function _isString(x) {
      return Object.prototype.toString.call(x) === "[object String]";
    }
    module.exports = _isString;
  }
});

// node_modules/ramda/src/nth.js
var require_nth = __commonJS({
  "node_modules/ramda/src/nth.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isString = require_isString();
    var nth = _curry2(function nth2(offset, list) {
      var idx = offset < 0 ? list.length + offset : offset;
      return _isString(list) ? list.charAt(idx) : list[idx];
    });
    module.exports = nth;
  }
});

// node_modules/ramda/src/prop.js
var require_prop = __commonJS({
  "node_modules/ramda/src/prop.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isInteger = require_isInteger();
    var nth = require_nth();
    var prop = _curry2(function prop2(p, obj) {
      if (obj == null) {
        return;
      }
      return _isInteger(p) ? nth(p, obj) : obj[p];
    });
    module.exports = prop;
  }
});

// node_modules/ramda/src/pluck.js
var require_pluck = __commonJS({
  "node_modules/ramda/src/pluck.js"(exports, module) {
    var _curry2 = require_curry2();
    var map = require_map2();
    var prop = require_prop();
    var pluck = _curry2(function pluck2(p, list) {
      return map(prop(p), list);
    });
    module.exports = pluck;
  }
});

// node_modules/ramda/src/internal/_isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/ramda/src/internal/_isArrayLike.js"(exports, module) {
    var _curry1 = require_curry1();
    var _isArray = require_isArray();
    var _isString = require_isString();
    var _isArrayLike = _curry1(function isArrayLike(x) {
      if (_isArray(x)) {
        return true;
      }
      if (!x) {
        return false;
      }
      if (typeof x !== "object") {
        return false;
      }
      if (_isString(x)) {
        return false;
      }
      if (x.length === 0) {
        return true;
      }
      if (x.length > 0) {
        return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
      }
      return false;
    });
    module.exports = _isArrayLike;
  }
});

// node_modules/ramda/src/internal/_createReduce.js
var require_createReduce = __commonJS({
  "node_modules/ramda/src/internal/_createReduce.js"(exports, module) {
    var _isArrayLike = require_isArrayLike();
    var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
    function _createReduce(arrayReduce, methodReduce, iterableReduce) {
      return function _reduce(xf, acc, list) {
        if (_isArrayLike(list)) {
          return arrayReduce(xf, acc, list);
        }
        if (list == null) {
          return acc;
        }
        if (typeof list["fantasy-land/reduce"] === "function") {
          return methodReduce(xf, acc, list, "fantasy-land/reduce");
        }
        if (list[symIterator] != null) {
          return iterableReduce(xf, acc, list[symIterator]());
        }
        if (typeof list.next === "function") {
          return iterableReduce(xf, acc, list);
        }
        if (typeof list.reduce === "function") {
          return methodReduce(xf, acc, list, "reduce");
        }
        throw new TypeError("reduce: list must be array or iterable");
      };
    }
    module.exports = _createReduce;
  }
});

// node_modules/ramda/src/internal/_xArrayReduce.js
var require_xArrayReduce = __commonJS({
  "node_modules/ramda/src/internal/_xArrayReduce.js"(exports, module) {
    function _xArrayReduce(xf, acc, list) {
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        acc = xf["@@transducer/step"](acc, list[idx]);
        if (acc && acc["@@transducer/reduced"]) {
          acc = acc["@@transducer/value"];
          break;
        }
        idx += 1;
      }
      return xf["@@transducer/result"](acc);
    }
    module.exports = _xArrayReduce;
  }
});

// node_modules/ramda/src/bind.js
var require_bind = __commonJS({
  "node_modules/ramda/src/bind.js"(exports, module) {
    var _arity = require_arity();
    var _curry2 = require_curry2();
    var bind = _curry2(function bind2(fn, thisObj) {
      return _arity(fn.length, function() {
        return fn.apply(thisObj, arguments);
      });
    });
    module.exports = bind;
  }
});

// node_modules/ramda/src/internal/_xReduce.js
var require_xReduce = __commonJS({
  "node_modules/ramda/src/internal/_xReduce.js"(exports, module) {
    var _createReduce = require_createReduce();
    var _xArrayReduce = require_xArrayReduce();
    var bind = require_bind();
    function _xIterableReduce(xf, acc, iter) {
      var step = iter.next();
      while (!step.done) {
        acc = xf["@@transducer/step"](acc, step.value);
        if (acc && acc["@@transducer/reduced"]) {
          acc = acc["@@transducer/value"];
          break;
        }
        step = iter.next();
      }
      return xf["@@transducer/result"](acc);
    }
    function _xMethodReduce(xf, acc, obj, methodName) {
      return xf["@@transducer/result"](obj[methodName](bind(xf["@@transducer/step"], xf), acc));
    }
    var _xReduce = _createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce);
    module.exports = _xReduce;
  }
});

// node_modules/ramda/src/internal/_xwrap.js
var require_xwrap = __commonJS({
  "node_modules/ramda/src/internal/_xwrap.js"(exports, module) {
    var XWrap = function() {
      function XWrap2(fn) {
        this.f = fn;
      }
      XWrap2.prototype["@@transducer/init"] = function() {
        throw new Error("init not implemented on XWrap");
      };
      XWrap2.prototype["@@transducer/result"] = function(acc) {
        return acc;
      };
      XWrap2.prototype["@@transducer/step"] = function(acc, x) {
        return this.f(acc, x);
      };
      return XWrap2;
    }();
    function _xwrap(fn) {
      return new XWrap(fn);
    }
    module.exports = _xwrap;
  }
});

// node_modules/ramda/src/reduce.js
var require_reduce = __commonJS({
  "node_modules/ramda/src/reduce.js"(exports, module) {
    var _curry3 = require_curry3();
    var _xReduce = require_xReduce();
    var _xwrap = require_xwrap();
    var reduce = _curry3(function(xf, acc, list) {
      return _xReduce(typeof xf === "function" ? _xwrap(xf) : xf, acc, list);
    });
    module.exports = reduce;
  }
});

// node_modules/ramda/src/allPass.js
var require_allPass = __commonJS({
  "node_modules/ramda/src/allPass.js"(exports, module) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var max = require_max();
    var pluck = require_pluck();
    var reduce = require_reduce();
    var allPass = _curry1(function allPass2(preds) {
      return curryN(reduce(max, 0, pluck("length", preds)), function() {
        var idx = 0;
        var len = preds.length;
        while (idx < len) {
          if (!preds[idx].apply(this, arguments)) {
            return false;
          }
          idx += 1;
        }
        return true;
      });
    });
    module.exports = allPass;
  }
});

// node_modules/ramda/src/always.js
var require_always = __commonJS({
  "node_modules/ramda/src/always.js"(exports, module) {
    var _curry1 = require_curry1();
    var always = _curry1(function always2(val) {
      return function() {
        return val;
      };
    });
    module.exports = always;
  }
});

// node_modules/ramda/src/and.js
var require_and = __commonJS({
  "node_modules/ramda/src/and.js"(exports, module) {
    var _curry2 = require_curry2();
    var and = _curry2(function and2(a, b) {
      return a && b;
    });
    module.exports = and;
  }
});

// node_modules/ramda/src/internal/_xany.js
var require_xany = __commonJS({
  "node_modules/ramda/src/internal/_xany.js"(exports, module) {
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XAny = function() {
      function XAny2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.any = false;
      }
      XAny2.prototype["@@transducer/init"] = _xfBase.init;
      XAny2.prototype["@@transducer/result"] = function(result) {
        if (!this.any) {
          result = this.xf["@@transducer/step"](result, false);
        }
        return this.xf["@@transducer/result"](result);
      };
      XAny2.prototype["@@transducer/step"] = function(result, input) {
        if (this.f(input)) {
          this.any = true;
          result = _reduced(this.xf["@@transducer/step"](result, true));
        }
        return result;
      };
      return XAny2;
    }();
    function _xany(f) {
      return function(xf) {
        return new XAny(f, xf);
      };
    }
    module.exports = _xany;
  }
});

// node_modules/ramda/src/any.js
var require_any = __commonJS({
  "node_modules/ramda/src/any.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xany = require_xany();
    var any = _curry2(
      _dispatchable(["any"], _xany, function any2(fn, list) {
        var idx = 0;
        while (idx < list.length) {
          if (fn(list[idx])) {
            return true;
          }
          idx += 1;
        }
        return false;
      })
    );
    module.exports = any;
  }
});

// node_modules/ramda/src/anyPass.js
var require_anyPass = __commonJS({
  "node_modules/ramda/src/anyPass.js"(exports, module) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var max = require_max();
    var pluck = require_pluck();
    var reduce = require_reduce();
    var anyPass = _curry1(function anyPass2(preds) {
      return curryN(reduce(max, 0, pluck("length", preds)), function() {
        var idx = 0;
        var len = preds.length;
        while (idx < len) {
          if (preds[idx].apply(this, arguments)) {
            return true;
          }
          idx += 1;
        }
        return false;
      });
    });
    module.exports = anyPass;
  }
});

// node_modules/ramda/src/internal/_reduce.js
var require_reduce2 = __commonJS({
  "node_modules/ramda/src/internal/_reduce.js"(exports, module) {
    var _arrayReduce = require_arrayReduce();
    var _createReduce = require_createReduce();
    function _iterableReduce(reducer, acc, iter) {
      var step = iter.next();
      while (!step.done) {
        acc = reducer(acc, step.value);
        step = iter.next();
      }
      return acc;
    }
    function _methodReduce(reducer, acc, obj, methodName) {
      return obj[methodName](reducer, acc);
    }
    var _reduce = _createReduce(_arrayReduce, _methodReduce, _iterableReduce);
    module.exports = _reduce;
  }
});

// node_modules/ramda/src/ap.js
var require_ap = __commonJS({
  "node_modules/ramda/src/ap.js"(exports, module) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var _reduce = require_reduce2();
    var map = require_map2();
    var ap = _curry2(function ap2(applyF, applyX) {
      return typeof applyX["fantasy-land/ap"] === "function" ? applyX["fantasy-land/ap"](applyF) : typeof applyF.ap === "function" ? applyF.ap(applyX) : typeof applyF === "function" ? function(x) {
        return applyF(x)(applyX(x));
      } : _reduce(function(acc, f) {
        return _concat(acc, map(f, applyX));
      }, [], applyF);
    });
    module.exports = ap;
  }
});

// node_modules/ramda/src/internal/_aperture.js
var require_aperture = __commonJS({
  "node_modules/ramda/src/internal/_aperture.js"(exports, module) {
    function _aperture(n, list) {
      var idx = 0;
      var limit = list.length - (n - 1);
      var acc = new Array(limit >= 0 ? limit : 0);
      while (idx < limit) {
        acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
        idx += 1;
      }
      return acc;
    }
    module.exports = _aperture;
  }
});

// node_modules/ramda/src/internal/_xaperture.js
var require_xaperture = __commonJS({
  "node_modules/ramda/src/internal/_xaperture.js"(exports, module) {
    var _concat = require_concat();
    var _xfBase = require_xfBase();
    var XAperture = function() {
      function XAperture2(n, xf) {
        this.xf = xf;
        this.pos = 0;
        this.full = false;
        this.acc = new Array(n);
      }
      XAperture2.prototype["@@transducer/init"] = _xfBase.init;
      XAperture2.prototype["@@transducer/result"] = function(result) {
        this.acc = null;
        return this.xf["@@transducer/result"](result);
      };
      XAperture2.prototype["@@transducer/step"] = function(result, input) {
        this.store(input);
        return this.full ? this.xf["@@transducer/step"](result, this.getCopy()) : result;
      };
      XAperture2.prototype.store = function(input) {
        this.acc[this.pos] = input;
        this.pos += 1;
        if (this.pos === this.acc.length) {
          this.pos = 0;
          this.full = true;
        }
      };
      XAperture2.prototype.getCopy = function() {
        return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
      };
      return XAperture2;
    }();
    function _xaperture(n) {
      return function(xf) {
        return new XAperture(n, xf);
      };
    }
    module.exports = _xaperture;
  }
});

// node_modules/ramda/src/aperture.js
var require_aperture2 = __commonJS({
  "node_modules/ramda/src/aperture.js"(exports, module) {
    var _aperture = require_aperture();
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xaperture = require_xaperture();
    var aperture = _curry2(
      _dispatchable([], _xaperture, _aperture)
    );
    module.exports = aperture;
  }
});

// node_modules/ramda/src/append.js
var require_append = __commonJS({
  "node_modules/ramda/src/append.js"(exports, module) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var append = _curry2(function append2(el, list) {
      return _concat(list, [el]);
    });
    module.exports = append;
  }
});

// node_modules/ramda/src/apply.js
var require_apply = __commonJS({
  "node_modules/ramda/src/apply.js"(exports, module) {
    var _curry2 = require_curry2();
    var apply = _curry2(function apply2(fn, args) {
      return fn.apply(this, args);
    });
    module.exports = apply;
  }
});

// node_modules/ramda/src/values.js
var require_values = __commonJS({
  "node_modules/ramda/src/values.js"(exports, module) {
    var _curry1 = require_curry1();
    var keys = require_keys();
    var values = _curry1(function values2(obj) {
      var props = keys(obj);
      var len = props.length;
      var vals = [];
      var idx = 0;
      while (idx < len) {
        vals[idx] = obj[props[idx]];
        idx += 1;
      }
      return vals;
    });
    module.exports = values;
  }
});

// node_modules/ramda/src/applySpec.js
var require_applySpec = __commonJS({
  "node_modules/ramda/src/applySpec.js"(exports, module) {
    var _curry1 = require_curry1();
    var _isArray = require_isArray();
    var apply = require_apply();
    var curryN = require_curryN2();
    var max = require_max();
    var pluck = require_pluck();
    var reduce = require_reduce();
    var keys = require_keys();
    var values = require_values();
    function mapValues(fn, obj) {
      return _isArray(obj) ? obj.map(fn) : keys(obj).reduce(function(acc, key) {
        acc[key] = fn(obj[key]);
        return acc;
      }, {});
    }
    var applySpec = _curry1(function applySpec2(spec) {
      spec = mapValues(function(v) {
        return typeof v == "function" ? v : applySpec2(v);
      }, spec);
      return curryN(reduce(max, 0, pluck("length", values(spec))), function() {
        var args = arguments;
        return mapValues(function(f) {
          return apply(f, args);
        }, spec);
      });
    });
    module.exports = applySpec;
  }
});

// node_modules/ramda/src/applyTo.js
var require_applyTo = __commonJS({
  "node_modules/ramda/src/applyTo.js"(exports, module) {
    var _curry2 = require_curry2();
    var applyTo = _curry2(function applyTo2(x, f) {
      return f(x);
    });
    module.exports = applyTo;
  }
});

// node_modules/ramda/src/ascend.js
var require_ascend = __commonJS({
  "node_modules/ramda/src/ascend.js"(exports, module) {
    var _curry3 = require_curry3();
    var ascend = _curry3(function ascend2(fn, a, b) {
      var aa = fn(a);
      var bb = fn(b);
      return aa < bb ? -1 : aa > bb ? 1 : 0;
    });
    module.exports = ascend;
  }
});

// node_modules/ramda/src/internal/_assoc.js
var require_assoc = __commonJS({
  "node_modules/ramda/src/internal/_assoc.js"(exports, module) {
    var _isArray = require_isArray();
    var _isInteger = require_isInteger();
    function _assoc(prop, val, obj) {
      if (_isInteger(prop) && _isArray(obj)) {
        var arr = [].concat(obj);
        arr[prop] = val;
        return arr;
      }
      var result = {};
      for (var p in obj) {
        result[p] = obj[p];
      }
      result[prop] = val;
      return result;
    }
    module.exports = _assoc;
  }
});

// node_modules/ramda/src/isNil.js
var require_isNil = __commonJS({
  "node_modules/ramda/src/isNil.js"(exports, module) {
    var _curry1 = require_curry1();
    var isNil = _curry1(function isNil2(x) {
      return x == null;
    });
    module.exports = isNil;
  }
});

// node_modules/ramda/src/assocPath.js
var require_assocPath = __commonJS({
  "node_modules/ramda/src/assocPath.js"(exports, module) {
    var _curry3 = require_curry3();
    var _has = require_has();
    var _isInteger = require_isInteger();
    var _assoc = require_assoc();
    var isNil = require_isNil();
    var assocPath = _curry3(function assocPath2(path, val, obj) {
      if (path.length === 0) {
        return val;
      }
      var idx = path[0];
      if (path.length > 1) {
        var nextObj = !isNil(obj) && _has(idx, obj) && typeof obj[idx] === "object" ? obj[idx] : _isInteger(path[1]) ? [] : {};
        val = assocPath2(Array.prototype.slice.call(path, 1), val, nextObj);
      }
      return _assoc(idx, val, obj);
    });
    module.exports = assocPath;
  }
});

// node_modules/ramda/src/assoc.js
var require_assoc2 = __commonJS({
  "node_modules/ramda/src/assoc.js"(exports, module) {
    var _curry3 = require_curry3();
    var assocPath = require_assocPath();
    var assoc = _curry3(function assoc2(prop, val, obj) {
      return assocPath([prop], val, obj);
    });
    module.exports = assoc;
  }
});

// node_modules/ramda/src/nAry.js
var require_nAry = __commonJS({
  "node_modules/ramda/src/nAry.js"(exports, module) {
    var _curry2 = require_curry2();
    var nAry = _curry2(function nAry2(n, fn) {
      switch (n) {
        case 0:
          return function() {
            return fn.call(this);
          };
        case 1:
          return function(a0) {
            return fn.call(this, a0);
          };
        case 2:
          return function(a0, a1) {
            return fn.call(this, a0, a1);
          };
        case 3:
          return function(a0, a1, a2) {
            return fn.call(this, a0, a1, a2);
          };
        case 4:
          return function(a0, a1, a2, a3) {
            return fn.call(this, a0, a1, a2, a3);
          };
        case 5:
          return function(a0, a1, a2, a3, a4) {
            return fn.call(this, a0, a1, a2, a3, a4);
          };
        case 6:
          return function(a0, a1, a2, a3, a4, a5) {
            return fn.call(this, a0, a1, a2, a3, a4, a5);
          };
        case 7:
          return function(a0, a1, a2, a3, a4, a5, a6) {
            return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
          };
        case 8:
          return function(a0, a1, a2, a3, a4, a5, a6, a7) {
            return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
          };
        case 9:
          return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
            return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
          };
        case 10:
          return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
          };
        default:
          throw new Error("First argument to nAry must be a non-negative integer no greater than ten");
      }
    });
    module.exports = nAry;
  }
});

// node_modules/ramda/src/binary.js
var require_binary = __commonJS({
  "node_modules/ramda/src/binary.js"(exports, module) {
    var _curry1 = require_curry1();
    var nAry = require_nAry();
    var binary = _curry1(function binary2(fn) {
      return nAry(2, fn);
    });
    module.exports = binary;
  }
});

// node_modules/ramda/src/internal/_isFunction.js
var require_isFunction = __commonJS({
  "node_modules/ramda/src/internal/_isFunction.js"(exports, module) {
    function _isFunction(x) {
      var type = Object.prototype.toString.call(x);
      return type === "[object Function]" || type === "[object AsyncFunction]" || type === "[object GeneratorFunction]" || type === "[object AsyncGeneratorFunction]";
    }
    module.exports = _isFunction;
  }
});

// node_modules/ramda/src/liftN.js
var require_liftN = __commonJS({
  "node_modules/ramda/src/liftN.js"(exports, module) {
    var _curry2 = require_curry2();
    var _arrayReduce = require_arrayReduce();
    var ap = require_ap();
    var curryN = require_curryN2();
    var map = require_map2();
    var liftN = _curry2(function liftN2(arity, fn) {
      var lifted = curryN(arity, fn);
      return curryN(arity, function() {
        return _arrayReduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
      });
    });
    module.exports = liftN;
  }
});

// node_modules/ramda/src/lift.js
var require_lift = __commonJS({
  "node_modules/ramda/src/lift.js"(exports, module) {
    var _curry1 = require_curry1();
    var liftN = require_liftN();
    var lift = _curry1(function lift2(fn) {
      return liftN(fn.length, fn);
    });
    module.exports = lift;
  }
});

// node_modules/ramda/src/both.js
var require_both = __commonJS({
  "node_modules/ramda/src/both.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isFunction = require_isFunction();
    var and = require_and();
    var lift = require_lift();
    var both = _curry2(function both2(f, g) {
      return _isFunction(f) ? function _both() {
        return f.apply(this, arguments) && g.apply(this, arguments);
      } : lift(and)(f, g);
    });
    module.exports = both;
  }
});

// node_modules/ramda/src/call.js
var require_call = __commonJS({
  "node_modules/ramda/src/call.js"(exports, module) {
    var _curry1 = require_curry1();
    var call = _curry1(function call2(fn) {
      return fn.apply(this, Array.prototype.slice.call(arguments, 1));
    });
    module.exports = call;
  }
});

// node_modules/ramda/src/internal/_makeFlat.js
var require_makeFlat = __commonJS({
  "node_modules/ramda/src/internal/_makeFlat.js"(exports, module) {
    var _isArrayLike = require_isArrayLike();
    function _makeFlat(recursive) {
      return function flatt(list) {
        var value, jlen, j;
        var result = [];
        var idx = 0;
        var ilen = list.length;
        while (idx < ilen) {
          if (_isArrayLike(list[idx])) {
            value = recursive ? flatt(list[idx]) : list[idx];
            j = 0;
            jlen = value.length;
            while (j < jlen) {
              result[result.length] = value[j];
              j += 1;
            }
          } else {
            result[result.length] = list[idx];
          }
          idx += 1;
        }
        return result;
      };
    }
    module.exports = _makeFlat;
  }
});

// node_modules/ramda/src/internal/_forceReduced.js
var require_forceReduced = __commonJS({
  "node_modules/ramda/src/internal/_forceReduced.js"(exports, module) {
    function _forceReduced(x) {
      return {
        "@@transducer/value": x,
        "@@transducer/reduced": true
      };
    }
    module.exports = _forceReduced;
  }
});

// node_modules/ramda/src/internal/_flatCat.js
var require_flatCat = __commonJS({
  "node_modules/ramda/src/internal/_flatCat.js"(exports, module) {
    var _forceReduced = require_forceReduced();
    var _isArrayLike = require_isArrayLike();
    var _xArrayReduce = require_xArrayReduce();
    var _xReduce = require_xReduce();
    var _xfBase = require_xfBase();
    var tInit = "@@transducer/init";
    var tStep = "@@transducer/step";
    var tResult = "@@transducer/result";
    var XPreservingReduced = function() {
      function XPreservingReduced2(xf) {
        this.xf = xf;
      }
      XPreservingReduced2.prototype[tInit] = _xfBase.init;
      XPreservingReduced2.prototype[tResult] = _xfBase.result;
      XPreservingReduced2.prototype[tStep] = function(result, input) {
        var ret = this.xf[tStep](result, input);
        return ret["@@transducer/reduced"] ? _forceReduced(ret) : ret;
      };
      return XPreservingReduced2;
    }();
    var XFlatCat = function() {
      function XFlatCat2(xf) {
        this.xf = new XPreservingReduced(xf);
      }
      XFlatCat2.prototype[tInit] = _xfBase.init;
      XFlatCat2.prototype[tResult] = _xfBase.result;
      XFlatCat2.prototype[tStep] = function(result, input) {
        return !_isArrayLike(input) ? _xArrayReduce(this.xf, result, [input]) : _xReduce(this.xf, result, input);
      };
      return XFlatCat2;
    }();
    var _flatCat = function _xcat(xf) {
      return new XFlatCat(xf);
    };
    module.exports = _flatCat;
  }
});

// node_modules/ramda/src/internal/_xchain.js
var require_xchain = __commonJS({
  "node_modules/ramda/src/internal/_xchain.js"(exports, module) {
    var _flatCat = require_flatCat();
    var _xmap = require_xmap();
    function _xchain(f) {
      return function(xf) {
        return _xmap(f)(_flatCat(xf));
      };
    }
    module.exports = _xchain;
  }
});

// node_modules/ramda/src/chain.js
var require_chain = __commonJS({
  "node_modules/ramda/src/chain.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _makeFlat = require_makeFlat();
    var _xchain = require_xchain();
    var map = require_map2();
    var chain = _curry2(
      _dispatchable(["fantasy-land/chain", "chain"], _xchain, function chain2(fn, monad) {
        if (typeof monad === "function") {
          return function(x) {
            return fn(monad(x))(x);
          };
        }
        return _makeFlat(false)(map(fn, monad));
      })
    );
    module.exports = chain;
  }
});

// node_modules/ramda/src/clamp.js
var require_clamp = __commonJS({
  "node_modules/ramda/src/clamp.js"(exports, module) {
    var _curry3 = require_curry3();
    var clamp = _curry3(function clamp2(min, max, value) {
      if (min > max) {
        throw new Error("min must not be greater than max in clamp(min, max, value)");
      }
      return value < min ? min : value > max ? max : value;
    });
    module.exports = clamp;
  }
});

// node_modules/ramda/src/internal/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  "node_modules/ramda/src/internal/_cloneRegExp.js"(exports, module) {
    function _cloneRegExp(pattern) {
      return new RegExp(pattern.source, pattern.flags ? pattern.flags : (pattern.global ? "g" : "") + (pattern.ignoreCase ? "i" : "") + (pattern.multiline ? "m" : "") + (pattern.sticky ? "y" : "") + (pattern.unicode ? "u" : "") + (pattern.dotAll ? "s" : ""));
    }
    module.exports = _cloneRegExp;
  }
});

// node_modules/ramda/src/internal/_clone.js
var require_clone = __commonJS({
  "node_modules/ramda/src/internal/_clone.js"(exports, module) {
    var _cloneRegExp = require_cloneRegExp();
    var type = require_type();
    function _clone(value, deep, map) {
      map || (map = new _ObjectMap());
      if (_isPrimitive(value)) {
        return value;
      }
      var copy = function copy2(copiedValue) {
        var cachedCopy = map.get(value);
        if (cachedCopy) {
          return cachedCopy;
        }
        map.set(value, copiedValue);
        for (var key in value) {
          if (Object.prototype.hasOwnProperty.call(value, key)) {
            copiedValue[key] = deep ? _clone(value[key], true, map) : value[key];
          }
        }
        return copiedValue;
      };
      switch (type(value)) {
        case "Object":
          return copy(Object.create(Object.getPrototypeOf(value)));
        case "Array":
          return copy([]);
        case "Date":
          return new Date(value.valueOf());
        case "RegExp":
          return _cloneRegExp(value);
        case "Int8Array":
        case "Uint8Array":
        case "Uint8ClampedArray":
        case "Int16Array":
        case "Uint16Array":
        case "Int32Array":
        case "Uint32Array":
        case "Float32Array":
        case "Float64Array":
        case "BigInt64Array":
        case "BigUint64Array":
          return value.slice();
        default:
          return value;
      }
    }
    module.exports = _clone;
    function _isPrimitive(param) {
      var type2 = typeof param;
      return param == null || type2 != "object" && type2 != "function";
    }
    var _ObjectMap = function() {
      function _ObjectMap2() {
        this.map = {};
        this.length = 0;
      }
      _ObjectMap2.prototype.set = function(key, value) {
        const hashedKey = this.hash(key);
        let bucket = this.map[hashedKey];
        if (!bucket) {
          this.map[hashedKey] = bucket = [];
        }
        bucket.push([key, value]);
        this.length += 1;
      };
      _ObjectMap2.prototype.hash = function(key) {
        let hashedKey = [];
        for (var value in key) {
          hashedKey.push(Object.prototype.toString.call(key[value]));
        }
        return hashedKey.join();
      };
      _ObjectMap2.prototype.get = function(key) {
        if (this.length <= 180) {
          for (const p in this.map) {
            const bucket2 = this.map[p];
            for (let i = 0; i < bucket2.length; i += 1) {
              const element = bucket2[i];
              if (element[0] === key) {
                return element[1];
              }
            }
          }
          return;
        }
        const hashedKey = this.hash(key);
        const bucket = this.map[hashedKey];
        if (!bucket) {
          return;
        }
        for (let i = 0; i < bucket.length; i += 1) {
          const element = bucket[i];
          if (element[0] === key) {
            return element[1];
          }
        }
      };
      return _ObjectMap2;
    }();
  }
});

// node_modules/ramda/src/clone.js
var require_clone2 = __commonJS({
  "node_modules/ramda/src/clone.js"(exports, module) {
    var _clone = require_clone();
    var _curry1 = require_curry1();
    var clone = _curry1(function clone2(value) {
      return value != null && typeof value.clone === "function" ? value.clone() : _clone(value, true);
    });
    module.exports = clone;
  }
});

// node_modules/ramda/src/collectBy.js
var require_collectBy = __commonJS({
  "node_modules/ramda/src/collectBy.js"(exports, module) {
    var _curry2 = require_curry2();
    var _reduce = require_reduce2();
    var collectBy = _curry2(function collectBy2(fn, list) {
      var group = _reduce(function(o, x) {
        var tag2 = fn(x);
        if (o[tag2] === void 0) {
          o[tag2] = [];
        }
        o[tag2].push(x);
        return o;
      }, {}, list);
      var newList = [];
      for (var tag in group) {
        newList.push(group[tag]);
      }
      return newList;
    });
    module.exports = collectBy;
  }
});

// node_modules/ramda/src/comparator.js
var require_comparator = __commonJS({
  "node_modules/ramda/src/comparator.js"(exports, module) {
    var _curry1 = require_curry1();
    var comparator = _curry1(function comparator2(pred) {
      return function(a, b) {
        return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
      };
    });
    module.exports = comparator;
  }
});

// node_modules/ramda/src/not.js
var require_not = __commonJS({
  "node_modules/ramda/src/not.js"(exports, module) {
    var _curry1 = require_curry1();
    var not = _curry1(function not2(a) {
      return !a;
    });
    module.exports = not;
  }
});

// node_modules/ramda/src/complement.js
var require_complement2 = __commonJS({
  "node_modules/ramda/src/complement.js"(exports, module) {
    var lift = require_lift();
    var not = require_not();
    var complement = lift(not);
    module.exports = complement;
  }
});

// node_modules/ramda/src/internal/_pipe.js
var require_pipe = __commonJS({
  "node_modules/ramda/src/internal/_pipe.js"(exports, module) {
    function _pipe(f, g) {
      return function() {
        return g.call(this, f.apply(this, arguments));
      };
    }
    module.exports = _pipe;
  }
});

// node_modules/ramda/src/internal/_checkForMethod.js
var require_checkForMethod = __commonJS({
  "node_modules/ramda/src/internal/_checkForMethod.js"(exports, module) {
    var _isArray = require_isArray();
    function _checkForMethod(methodname, fn) {
      return function() {
        var length = arguments.length;
        if (length === 0) {
          return fn();
        }
        var obj = arguments[length - 1];
        return _isArray(obj) || typeof obj[methodname] !== "function" ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
      };
    }
    module.exports = _checkForMethod;
  }
});

// node_modules/ramda/src/slice.js
var require_slice = __commonJS({
  "node_modules/ramda/src/slice.js"(exports, module) {
    var _checkForMethod = require_checkForMethod();
    var _curry3 = require_curry3();
    var slice = _curry3(
      _checkForMethod("slice", function slice2(fromIndex, toIndex, list) {
        return Array.prototype.slice.call(list, fromIndex, toIndex);
      })
    );
    module.exports = slice;
  }
});

// node_modules/ramda/src/tail.js
var require_tail = __commonJS({
  "node_modules/ramda/src/tail.js"(exports, module) {
    var _checkForMethod = require_checkForMethod();
    var _curry1 = require_curry1();
    var slice = require_slice();
    var tail = _curry1(
      _checkForMethod(
        "tail",
        slice(1, Infinity)
      )
    );
    module.exports = tail;
  }
});

// node_modules/ramda/src/pipe.js
var require_pipe2 = __commonJS({
  "node_modules/ramda/src/pipe.js"(exports, module) {
    var _arity = require_arity();
    var _pipe = require_pipe();
    var reduce = require_reduce();
    var tail = require_tail();
    function pipe() {
      if (arguments.length === 0) {
        throw new Error("pipe requires at least one argument");
      }
      return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
    }
    module.exports = pipe;
  }
});

// node_modules/ramda/src/reverse.js
var require_reverse = __commonJS({
  "node_modules/ramda/src/reverse.js"(exports, module) {
    var _curry1 = require_curry1();
    var _isString = require_isString();
    var reverse = _curry1(function reverse2(list) {
      return _isString(list) ? list.split("").reverse().join("") : Array.prototype.slice.call(list, 0).reverse();
    });
    module.exports = reverse;
  }
});

// node_modules/ramda/src/compose.js
var require_compose = __commonJS({
  "node_modules/ramda/src/compose.js"(exports, module) {
    var pipe = require_pipe2();
    var reverse = require_reverse();
    function compose() {
      if (arguments.length === 0) {
        throw new Error("compose requires at least one argument");
      }
      return pipe.apply(this, reverse(arguments));
    }
    module.exports = compose;
  }
});

// node_modules/ramda/src/head.js
var require_head = __commonJS({
  "node_modules/ramda/src/head.js"(exports, module) {
    var nth = require_nth();
    var head = nth(0);
    module.exports = head;
  }
});

// node_modules/ramda/src/internal/_identity.js
var require_identity = __commonJS({
  "node_modules/ramda/src/internal/_identity.js"(exports, module) {
    function _identity(x) {
      return x;
    }
    module.exports = _identity;
  }
});

// node_modules/ramda/src/identity.js
var require_identity2 = __commonJS({
  "node_modules/ramda/src/identity.js"(exports, module) {
    var _curry1 = require_curry1();
    var _identity = require_identity();
    var identity = _curry1(_identity);
    module.exports = identity;
  }
});

// node_modules/ramda/src/pipeWith.js
var require_pipeWith = __commonJS({
  "node_modules/ramda/src/pipeWith.js"(exports, module) {
    var _arity = require_arity();
    var _curry2 = require_curry2();
    var head = require_head();
    var _reduce = require_reduce2();
    var tail = require_tail();
    var identity = require_identity2();
    var pipeWith = _curry2(function pipeWith2(xf, list) {
      if (list.length <= 0) {
        return identity;
      }
      var headList = head(list);
      var tailList = tail(list);
      return _arity(headList.length, function() {
        return _reduce(function(result, f) {
          return xf.call(this, f, result);
        }, headList.apply(this, arguments), tailList);
      });
    });
    module.exports = pipeWith;
  }
});

// node_modules/ramda/src/composeWith.js
var require_composeWith = __commonJS({
  "node_modules/ramda/src/composeWith.js"(exports, module) {
    var _curry2 = require_curry2();
    var pipeWith = require_pipeWith();
    var reverse = require_reverse();
    var composeWith = _curry2(function composeWith2(xf, list) {
      return pipeWith.apply(this, [xf, reverse(list)]);
    });
    module.exports = composeWith;
  }
});

// node_modules/ramda/src/concat.js
var require_concat2 = __commonJS({
  "node_modules/ramda/src/concat.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isArray = require_isArray();
    var _isFunction = require_isFunction();
    var _isString = require_isString();
    var toString = require_toString2();
    var concat = _curry2(function concat2(a, b) {
      if (_isArray(a)) {
        if (_isArray(b)) {
          return a.concat(b);
        }
        throw new TypeError(toString(b) + " is not an array");
      }
      if (_isString(a)) {
        if (_isString(b)) {
          return a + b;
        }
        throw new TypeError(toString(b) + " is not a string");
      }
      if (a != null && _isFunction(a["fantasy-land/concat"])) {
        return a["fantasy-land/concat"](b);
      }
      if (a != null && _isFunction(a.concat)) {
        return a.concat(b);
      }
      throw new TypeError(toString(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
    });
    module.exports = concat;
  }
});

// node_modules/ramda/src/cond.js
var require_cond = __commonJS({
  "node_modules/ramda/src/cond.js"(exports, module) {
    var _arity = require_arity();
    var _curry1 = require_curry1();
    var map = require_map2();
    var max = require_max();
    var reduce = require_reduce();
    var cond = _curry1(function cond2(pairs) {
      var arity = reduce(max, 0, map(function(pair) {
        return pair[0].length;
      }, pairs));
      return _arity(arity, function() {
        var idx = 0;
        while (idx < pairs.length) {
          if (pairs[idx][0].apply(this, arguments)) {
            return pairs[idx][1].apply(this, arguments);
          }
          idx += 1;
        }
      });
    });
    module.exports = cond;
  }
});

// node_modules/ramda/src/curry.js
var require_curry = __commonJS({
  "node_modules/ramda/src/curry.js"(exports, module) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var curry = _curry1(function curry2(fn) {
      return curryN(fn.length, fn);
    });
    module.exports = curry;
  }
});

// node_modules/ramda/src/constructN.js
var require_constructN = __commonJS({
  "node_modules/ramda/src/constructN.js"(exports, module) {
    var _curry2 = require_curry2();
    var curry = require_curry();
    var nAry = require_nAry();
    var constructN = _curry2(function constructN2(n, Fn) {
      if (n > 10) {
        throw new Error("Constructor with greater than ten arguments");
      }
      if (n === 0) {
        return function() {
          return new Fn();
        };
      }
      return curry(nAry(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
        switch (n) {
          case 1:
            return new Fn($0);
          case 2:
            return new Fn($0, $1);
          case 3:
            return new Fn($0, $1, $2);
          case 4:
            return new Fn($0, $1, $2, $3);
          case 5:
            return new Fn($0, $1, $2, $3, $4);
          case 6:
            return new Fn($0, $1, $2, $3, $4, $5);
          case 7:
            return new Fn($0, $1, $2, $3, $4, $5, $6);
          case 8:
            return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
          case 9:
            return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
          case 10:
            return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
        }
      }));
    });
    module.exports = constructN;
  }
});

// node_modules/ramda/src/construct.js
var require_construct = __commonJS({
  "node_modules/ramda/src/construct.js"(exports, module) {
    var _curry1 = require_curry1();
    var constructN = require_constructN();
    var construct = _curry1(function construct2(Fn) {
      return constructN(Fn.length, Fn);
    });
    module.exports = construct;
  }
});

// node_modules/ramda/src/converge.js
var require_converge = __commonJS({
  "node_modules/ramda/src/converge.js"(exports, module) {
    var _curry2 = require_curry2();
    var _map = require_map();
    var curryN = require_curryN2();
    var max = require_max();
    var pluck = require_pluck();
    var reduce = require_reduce();
    var converge = _curry2(function converge2(after, fns) {
      return curryN(reduce(max, 0, pluck("length", fns)), function() {
        var args = arguments;
        var context = this;
        return after.apply(context, _map(function(fn) {
          return fn.apply(context, args);
        }, fns));
      });
    });
    module.exports = converge;
  }
});

// node_modules/ramda/src/count.js
var require_count = __commonJS({
  "node_modules/ramda/src/count.js"(exports, module) {
    var _reduce = require_reduce2();
    var curry = require_curry();
    var count = curry(function(pred, list) {
      return _reduce(function(a, e) {
        return pred(e) ? a + 1 : a;
      }, 0, list);
    });
    module.exports = count;
  }
});

// node_modules/ramda/src/internal/_xreduceBy.js
var require_xreduceBy = __commonJS({
  "node_modules/ramda/src/internal/_xreduceBy.js"(exports, module) {
    var _clone = require_clone();
    var _has = require_has();
    var _xfBase = require_xfBase();
    var XReduceBy = function() {
      function XReduceBy2(valueFn, valueAcc, keyFn, xf) {
        this.valueFn = valueFn;
        this.valueAcc = valueAcc;
        this.keyFn = keyFn;
        this.xf = xf;
        this.inputs = {};
      }
      XReduceBy2.prototype["@@transducer/init"] = _xfBase.init;
      XReduceBy2.prototype["@@transducer/result"] = function(result) {
        var key;
        for (key in this.inputs) {
          if (_has(key, this.inputs)) {
            result = this.xf["@@transducer/step"](result, this.inputs[key]);
            if (result["@@transducer/reduced"]) {
              result = result["@@transducer/value"];
              break;
            }
          }
        }
        this.inputs = null;
        return this.xf["@@transducer/result"](result);
      };
      XReduceBy2.prototype["@@transducer/step"] = function(result, input) {
        var key = this.keyFn(input);
        this.inputs[key] = this.inputs[key] || [key, _clone(this.valueAcc, false)];
        this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
        return result;
      };
      return XReduceBy2;
    }();
    function _xreduceBy(valueFn, valueAcc, keyFn) {
      return function(xf) {
        return new XReduceBy(valueFn, valueAcc, keyFn, xf);
      };
    }
    module.exports = _xreduceBy;
  }
});

// node_modules/ramda/src/reduceBy.js
var require_reduceBy = __commonJS({
  "node_modules/ramda/src/reduceBy.js"(exports, module) {
    var _clone = require_clone();
    var _curryN = require_curryN();
    var _dispatchable = require_dispatchable();
    var _has = require_has();
    var _reduced = require_reduced();
    var _xReduce = require_xReduce();
    var _xreduceBy = require_xreduceBy();
    var _xwrap = require_xwrap();
    var reduceBy = _curryN(
      4,
      [],
      _dispatchable([], _xreduceBy, function reduceBy2(valueFn, valueAcc, keyFn, list) {
        var xf = _xwrap(function(acc, elt) {
          var key = keyFn(elt);
          var value = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, false), elt);
          if (value && value["@@transducer/reduced"]) {
            return _reduced(acc);
          }
          acc[key] = value;
          return acc;
        });
        return _xReduce(xf, {}, list);
      })
    );
    module.exports = reduceBy;
  }
});

// node_modules/ramda/src/countBy.js
var require_countBy = __commonJS({
  "node_modules/ramda/src/countBy.js"(exports, module) {
    var reduceBy = require_reduceBy();
    var countBy = reduceBy(function(acc, elem) {
      return acc + 1;
    }, 0);
    module.exports = countBy;
  }
});

// node_modules/ramda/src/dec.js
var require_dec = __commonJS({
  "node_modules/ramda/src/dec.js"(exports, module) {
    var add = require_add();
    var dec = add(-1);
    module.exports = dec;
  }
});

// node_modules/ramda/src/defaultTo.js
var require_defaultTo = __commonJS({
  "node_modules/ramda/src/defaultTo.js"(exports, module) {
    var _curry2 = require_curry2();
    var defaultTo = _curry2(function defaultTo2(d, v) {
      return v == null || v !== v ? d : v;
    });
    module.exports = defaultTo;
  }
});

// node_modules/ramda/src/descend.js
var require_descend = __commonJS({
  "node_modules/ramda/src/descend.js"(exports, module) {
    var _curry3 = require_curry3();
    var descend = _curry3(function descend2(fn, a, b) {
      var aa = fn(a);
      var bb = fn(b);
      return aa > bb ? -1 : aa < bb ? 1 : 0;
    });
    module.exports = descend;
  }
});

// node_modules/ramda/src/internal/_Set.js
var require_Set = __commonJS({
  "node_modules/ramda/src/internal/_Set.js"(exports, module) {
    var _includes = require_includes();
    var _Set = function() {
      function _Set2() {
        this._nativeSet = typeof Set === "function" ? /* @__PURE__ */ new Set() : null;
        this._items = {};
      }
      _Set2.prototype.add = function(item) {
        return !hasOrAdd(item, true, this);
      };
      _Set2.prototype.has = function(item) {
        return hasOrAdd(item, false, this);
      };
      return _Set2;
    }();
    function hasOrAdd(item, shouldAdd, set) {
      var type = typeof item;
      var prevSize, newSize;
      switch (type) {
        case "string":
        case "number":
          if (item === 0 && 1 / item === -Infinity) {
            if (set._items["-0"]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items["-0"] = true;
              }
              return false;
            }
          }
          if (set._nativeSet !== null) {
            if (shouldAdd) {
              prevSize = set._nativeSet.size;
              set._nativeSet.add(item);
              newSize = set._nativeSet.size;
              return newSize === prevSize;
            } else {
              return set._nativeSet.has(item);
            }
          } else {
            if (!(type in set._items)) {
              if (shouldAdd) {
                set._items[type] = {};
                set._items[type][item] = true;
              }
              return false;
            } else if (item in set._items[type]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items[type][item] = true;
              }
              return false;
            }
          }
        case "boolean":
          if (type in set._items) {
            var bIdx = item ? 1 : 0;
            if (set._items[type][bIdx]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items[type][bIdx] = true;
              }
              return false;
            }
          } else {
            if (shouldAdd) {
              set._items[type] = item ? [false, true] : [true, false];
            }
            return false;
          }
        case "function":
          if (set._nativeSet !== null) {
            if (shouldAdd) {
              prevSize = set._nativeSet.size;
              set._nativeSet.add(item);
              newSize = set._nativeSet.size;
              return newSize === prevSize;
            } else {
              return set._nativeSet.has(item);
            }
          } else {
            if (!(type in set._items)) {
              if (shouldAdd) {
                set._items[type] = [item];
              }
              return false;
            }
            if (!_includes(item, set._items[type])) {
              if (shouldAdd) {
                set._items[type].push(item);
              }
              return false;
            }
            return true;
          }
        case "undefined":
          if (set._items[type]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type] = true;
            }
            return false;
          }
        case "object":
          if (item === null) {
            if (!set._items["null"]) {
              if (shouldAdd) {
                set._items["null"] = true;
              }
              return false;
            }
            return true;
          }
        default:
          type = Object.prototype.toString.call(item);
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = [item];
            }
            return false;
          }
          if (!_includes(item, set._items[type])) {
            if (shouldAdd) {
              set._items[type].push(item);
            }
            return false;
          }
          return true;
      }
    }
    module.exports = _Set;
  }
});

// node_modules/ramda/src/difference.js
var require_difference = __commonJS({
  "node_modules/ramda/src/difference.js"(exports, module) {
    var _curry2 = require_curry2();
    var _Set = require_Set();
    var difference = _curry2(function difference2(first, second) {
      var out = [];
      var idx = 0;
      var firstLen = first.length;
      var secondLen = second.length;
      var toFilterOut = new _Set();
      for (var i = 0; i < secondLen; i += 1) {
        toFilterOut.add(second[i]);
      }
      while (idx < firstLen) {
        if (toFilterOut.add(first[idx])) {
          out[out.length] = first[idx];
        }
        idx += 1;
      }
      return out;
    });
    module.exports = difference;
  }
});

// node_modules/ramda/src/differenceWith.js
var require_differenceWith = __commonJS({
  "node_modules/ramda/src/differenceWith.js"(exports, module) {
    var _includesWith = require_includesWith();
    var _curry3 = require_curry3();
    var differenceWith = _curry3(function differenceWith2(pred, first, second) {
      var out = [];
      var idx = 0;
      var firstLen = first.length;
      while (idx < firstLen) {
        if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {
          out.push(first[idx]);
        }
        idx += 1;
      }
      return out;
    });
    module.exports = differenceWith;
  }
});

// node_modules/ramda/src/remove.js
var require_remove = __commonJS({
  "node_modules/ramda/src/remove.js"(exports, module) {
    var _curry3 = require_curry3();
    var remove = _curry3(function remove2(start, count, list) {
      var result = Array.prototype.slice.call(list, 0);
      result.splice(start, count);
      return result;
    });
    module.exports = remove;
  }
});

// node_modules/ramda/src/internal/_dissoc.js
var require_dissoc = __commonJS({
  "node_modules/ramda/src/internal/_dissoc.js"(exports, module) {
    var _isInteger = require_isInteger();
    var _isArray = require_isArray();
    var remove = require_remove();
    function _dissoc(prop, obj) {
      if (obj == null) {
        return obj;
      }
      if (_isInteger(prop) && _isArray(obj)) {
        return remove(prop, 1, obj);
      }
      var result = {};
      for (var p in obj) {
        result[p] = obj[p];
      }
      delete result[prop];
      return result;
    }
    module.exports = _dissoc;
  }
});

// node_modules/ramda/src/dissocPath.js
var require_dissocPath = __commonJS({
  "node_modules/ramda/src/dissocPath.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dissoc = require_dissoc();
    var _isInteger = require_isInteger();
    var _isArray = require_isArray();
    var assoc = require_assoc2();
    function _shallowCloneObject(prop, obj) {
      if (_isInteger(prop) && _isArray(obj)) {
        return [].concat(obj);
      }
      var result = {};
      for (var p in obj) {
        result[p] = obj[p];
      }
      return result;
    }
    var dissocPath = _curry2(function dissocPath2(path, obj) {
      if (obj == null) {
        return obj;
      }
      switch (path.length) {
        case 0:
          return obj;
        case 1:
          return _dissoc(path[0], obj);
        default:
          var head = path[0];
          var tail = Array.prototype.slice.call(path, 1);
          if (obj[head] == null) {
            return _shallowCloneObject(head, obj);
          } else {
            return assoc(head, dissocPath2(tail, obj[head]), obj);
          }
      }
    });
    module.exports = dissocPath;
  }
});

// node_modules/ramda/src/dissoc.js
var require_dissoc2 = __commonJS({
  "node_modules/ramda/src/dissoc.js"(exports, module) {
    var _curry2 = require_curry2();
    var dissocPath = require_dissocPath();
    var dissoc = _curry2(function dissoc2(prop, obj) {
      return dissocPath([prop], obj);
    });
    module.exports = dissoc;
  }
});

// node_modules/ramda/src/divide.js
var require_divide = __commonJS({
  "node_modules/ramda/src/divide.js"(exports, module) {
    var _curry2 = require_curry2();
    var divide = _curry2(function divide2(a, b) {
      return a / b;
    });
    module.exports = divide;
  }
});

// node_modules/ramda/src/internal/_xdrop.js
var require_xdrop = __commonJS({
  "node_modules/ramda/src/internal/_xdrop.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XDrop = function() {
      function XDrop2(n, xf) {
        this.xf = xf;
        this.n = n;
      }
      XDrop2.prototype["@@transducer/init"] = _xfBase.init;
      XDrop2.prototype["@@transducer/result"] = _xfBase.result;
      XDrop2.prototype["@@transducer/step"] = function(result, input) {
        if (this.n > 0) {
          this.n -= 1;
          return result;
        }
        return this.xf["@@transducer/step"](result, input);
      };
      return XDrop2;
    }();
    function _xdrop(n) {
      return function(xf) {
        return new XDrop(n, xf);
      };
    }
    module.exports = _xdrop;
  }
});

// node_modules/ramda/src/drop.js
var require_drop = __commonJS({
  "node_modules/ramda/src/drop.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xdrop = require_xdrop();
    var slice = require_slice();
    var drop = _curry2(
      _dispatchable(["drop"], _xdrop, function drop2(n, xs) {
        return slice(Math.max(0, n), Infinity, xs);
      })
    );
    module.exports = drop;
  }
});

// node_modules/ramda/src/internal/_xtake.js
var require_xtake = __commonJS({
  "node_modules/ramda/src/internal/_xtake.js"(exports, module) {
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XTake = function() {
      function XTake2(n, xf) {
        this.xf = xf;
        this.n = n;
        this.i = 0;
      }
      XTake2.prototype["@@transducer/init"] = _xfBase.init;
      XTake2.prototype["@@transducer/result"] = _xfBase.result;
      XTake2.prototype["@@transducer/step"] = function(result, input) {
        this.i += 1;
        var ret = this.n === 0 ? result : this.xf["@@transducer/step"](result, input);
        return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
      };
      return XTake2;
    }();
    function _xtake(n) {
      return function(xf) {
        return new XTake(n, xf);
      };
    }
    module.exports = _xtake;
  }
});

// node_modules/ramda/src/take.js
var require_take = __commonJS({
  "node_modules/ramda/src/take.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xtake = require_xtake();
    var slice = require_slice();
    var take = _curry2(
      _dispatchable(["take"], _xtake, function take2(n, xs) {
        return slice(0, n < 0 ? Infinity : n, xs);
      })
    );
    module.exports = take;
  }
});

// node_modules/ramda/src/internal/_dropLast.js
var require_dropLast = __commonJS({
  "node_modules/ramda/src/internal/_dropLast.js"(exports, module) {
    var take = require_take();
    function dropLast(n, xs) {
      return take(n < xs.length ? xs.length - n : 0, xs);
    }
    module.exports = dropLast;
  }
});

// node_modules/ramda/src/internal/_xdropLast.js
var require_xdropLast = __commonJS({
  "node_modules/ramda/src/internal/_xdropLast.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XDropLast = function() {
      function XDropLast2(n, xf) {
        if (n <= 0) {
          return xf;
        }
        this.xf = xf;
        this.pos = 0;
        this.full = false;
        this.acc = new Array(n);
      }
      XDropLast2.prototype["@@transducer/init"] = _xfBase.init;
      XDropLast2.prototype["@@transducer/result"] = function(result) {
        this.acc = null;
        return this.xf["@@transducer/result"](result);
      };
      XDropLast2.prototype["@@transducer/step"] = function(result, input) {
        if (this.full) {
          result = this.xf["@@transducer/step"](result, this.acc[this.pos]);
        }
        this.store(input);
        return result;
      };
      XDropLast2.prototype.store = function(input) {
        this.acc[this.pos] = input;
        this.pos += 1;
        if (this.pos === this.acc.length) {
          this.pos = 0;
          this.full = true;
        }
      };
      return XDropLast2;
    }();
    function _xdropLast(n) {
      return function(xf) {
        return new XDropLast(n, xf);
      };
    }
    module.exports = _xdropLast;
  }
});

// node_modules/ramda/src/dropLast.js
var require_dropLast2 = __commonJS({
  "node_modules/ramda/src/dropLast.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _dropLast = require_dropLast();
    var _xdropLast = require_xdropLast();
    var dropLast = _curry2(
      _dispatchable([], _xdropLast, _dropLast)
    );
    module.exports = dropLast;
  }
});

// node_modules/ramda/src/internal/_dropLastWhile.js
var require_dropLastWhile = __commonJS({
  "node_modules/ramda/src/internal/_dropLastWhile.js"(exports, module) {
    var slice = require_slice();
    function dropLastWhile(pred, xs) {
      var idx = xs.length - 1;
      while (idx >= 0 && pred(xs[idx])) {
        idx -= 1;
      }
      return slice(0, idx + 1, xs);
    }
    module.exports = dropLastWhile;
  }
});

// node_modules/ramda/src/internal/_xdropLastWhile.js
var require_xdropLastWhile = __commonJS({
  "node_modules/ramda/src/internal/_xdropLastWhile.js"(exports, module) {
    var _xfBase = require_xfBase();
    var _xReduce = require_xReduce();
    var XDropLastWhile = function() {
      function XDropLastWhile2(fn, xf) {
        this.f = fn;
        this.retained = [];
        this.xf = xf;
      }
      XDropLastWhile2.prototype["@@transducer/init"] = _xfBase.init;
      XDropLastWhile2.prototype["@@transducer/result"] = function(result) {
        this.retained = null;
        return this.xf["@@transducer/result"](result);
      };
      XDropLastWhile2.prototype["@@transducer/step"] = function(result, input) {
        return this.f(input) ? this.retain(result, input) : this.flush(result, input);
      };
      XDropLastWhile2.prototype.flush = function(result, input) {
        result = _xReduce(this.xf, result, this.retained);
        this.retained = [];
        return this.xf["@@transducer/step"](result, input);
      };
      XDropLastWhile2.prototype.retain = function(result, input) {
        this.retained.push(input);
        return result;
      };
      return XDropLastWhile2;
    }();
    function _xdropLastWhile(fn) {
      return function(xf) {
        return new XDropLastWhile(fn, xf);
      };
    }
    module.exports = _xdropLastWhile;
  }
});

// node_modules/ramda/src/dropLastWhile.js
var require_dropLastWhile2 = __commonJS({
  "node_modules/ramda/src/dropLastWhile.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _dropLastWhile = require_dropLastWhile();
    var _xdropLastWhile = require_xdropLastWhile();
    var dropLastWhile = _curry2(
      _dispatchable([], _xdropLastWhile, _dropLastWhile)
    );
    module.exports = dropLastWhile;
  }
});

// node_modules/ramda/src/internal/_xdropRepeatsWith.js
var require_xdropRepeatsWith = __commonJS({
  "node_modules/ramda/src/internal/_xdropRepeatsWith.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XDropRepeatsWith = function() {
      function XDropRepeatsWith2(pred, xf) {
        this.xf = xf;
        this.pred = pred;
        this.lastValue = void 0;
        this.seenFirstValue = false;
      }
      XDropRepeatsWith2.prototype["@@transducer/init"] = _xfBase.init;
      XDropRepeatsWith2.prototype["@@transducer/result"] = _xfBase.result;
      XDropRepeatsWith2.prototype["@@transducer/step"] = function(result, input) {
        var sameAsLast = false;
        if (!this.seenFirstValue) {
          this.seenFirstValue = true;
        } else if (this.pred(this.lastValue, input)) {
          sameAsLast = true;
        }
        this.lastValue = input;
        return sameAsLast ? result : this.xf["@@transducer/step"](result, input);
      };
      return XDropRepeatsWith2;
    }();
    function _xdropRepeatsWith(pred) {
      return function(xf) {
        return new XDropRepeatsWith(pred, xf);
      };
    }
    module.exports = _xdropRepeatsWith;
  }
});

// node_modules/ramda/src/last.js
var require_last = __commonJS({
  "node_modules/ramda/src/last.js"(exports, module) {
    var nth = require_nth();
    var last = nth(-1);
    module.exports = last;
  }
});

// node_modules/ramda/src/dropRepeatsWith.js
var require_dropRepeatsWith = __commonJS({
  "node_modules/ramda/src/dropRepeatsWith.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xdropRepeatsWith = require_xdropRepeatsWith();
    var last = require_last();
    var dropRepeatsWith = _curry2(
      _dispatchable([], _xdropRepeatsWith, function dropRepeatsWith2(pred, list) {
        var result = [];
        var idx = 1;
        var len = list.length;
        if (len !== 0) {
          result[0] = list[0];
          while (idx < len) {
            if (!pred(last(result), list[idx])) {
              result[result.length] = list[idx];
            }
            idx += 1;
          }
        }
        return result;
      })
    );
    module.exports = dropRepeatsWith;
  }
});

// node_modules/ramda/src/dropRepeats.js
var require_dropRepeats = __commonJS({
  "node_modules/ramda/src/dropRepeats.js"(exports, module) {
    var _curry1 = require_curry1();
    var _dispatchable = require_dispatchable();
    var _xdropRepeatsWith = require_xdropRepeatsWith();
    var dropRepeatsWith = require_dropRepeatsWith();
    var equals = require_equals2();
    var dropRepeats = _curry1(
      _dispatchable(
        [],
        function() {
          return _xdropRepeatsWith(equals);
        },
        dropRepeatsWith(equals)
      )
    );
    module.exports = dropRepeats;
  }
});

// node_modules/ramda/src/eqBy.js
var require_eqBy = __commonJS({
  "node_modules/ramda/src/eqBy.js"(exports, module) {
    var _curry3 = require_curry3();
    var equals = require_equals2();
    var eqBy = _curry3(function eqBy2(f, x, y) {
      return equals(f(x), f(y));
    });
    module.exports = eqBy;
  }
});

// node_modules/ramda/src/dropRepeatsBy.js
var require_dropRepeatsBy = __commonJS({
  "node_modules/ramda/src/dropRepeatsBy.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xdropRepeatsWith = require_xdropRepeatsWith();
    var dropRepeatsWith = require_dropRepeatsWith();
    var eqBy = require_eqBy();
    var dropRepeatsBy = _curry2(function(fn, list) {
      return _dispatchable([], function() {
        return _xdropRepeatsWith(eqBy(fn));
      }, dropRepeatsWith(eqBy(fn)))(list);
    });
    module.exports = dropRepeatsBy;
  }
});

// node_modules/ramda/src/internal/_xdropWhile.js
var require_xdropWhile = __commonJS({
  "node_modules/ramda/src/internal/_xdropWhile.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XDropWhile = function() {
      function XDropWhile2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XDropWhile2.prototype["@@transducer/init"] = _xfBase.init;
      XDropWhile2.prototype["@@transducer/result"] = _xfBase.result;
      XDropWhile2.prototype["@@transducer/step"] = function(result, input) {
        if (this.f) {
          if (this.f(input)) {
            return result;
          }
          this.f = null;
        }
        return this.xf["@@transducer/step"](result, input);
      };
      return XDropWhile2;
    }();
    function _xdropWhile(f) {
      return function(xf) {
        return new XDropWhile(f, xf);
      };
    }
    module.exports = _xdropWhile;
  }
});

// node_modules/ramda/src/dropWhile.js
var require_dropWhile = __commonJS({
  "node_modules/ramda/src/dropWhile.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xdropWhile = require_xdropWhile();
    var slice = require_slice();
    var dropWhile = _curry2(
      _dispatchable(["dropWhile"], _xdropWhile, function dropWhile2(pred, xs) {
        var idx = 0;
        var len = xs.length;
        while (idx < len && pred(xs[idx])) {
          idx += 1;
        }
        return slice(idx, Infinity, xs);
      })
    );
    module.exports = dropWhile;
  }
});

// node_modules/ramda/src/or.js
var require_or = __commonJS({
  "node_modules/ramda/src/or.js"(exports, module) {
    var _curry2 = require_curry2();
    var or = _curry2(function or2(a, b) {
      return a || b;
    });
    module.exports = or;
  }
});

// node_modules/ramda/src/either.js
var require_either = __commonJS({
  "node_modules/ramda/src/either.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isFunction = require_isFunction();
    var lift = require_lift();
    var or = require_or();
    var either = _curry2(function either2(f, g) {
      return _isFunction(f) ? function _either() {
        return f.apply(this, arguments) || g.apply(this, arguments);
      } : lift(or)(f, g);
    });
    module.exports = either;
  }
});

// node_modules/ramda/src/internal/_isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/ramda/src/internal/_isTypedArray.js"(exports, module) {
    function _isTypedArray(val) {
      var type = Object.prototype.toString.call(val);
      return type === "[object Uint8ClampedArray]" || type === "[object Int8Array]" || type === "[object Uint8Array]" || type === "[object Int16Array]" || type === "[object Uint16Array]" || type === "[object Int32Array]" || type === "[object Uint32Array]" || type === "[object Float32Array]" || type === "[object Float64Array]" || type === "[object BigInt64Array]" || type === "[object BigUint64Array]";
    }
    module.exports = _isTypedArray;
  }
});

// node_modules/ramda/src/empty.js
var require_empty = __commonJS({
  "node_modules/ramda/src/empty.js"(exports, module) {
    var _curry1 = require_curry1();
    var _isArguments = require_isArguments();
    var _isArray = require_isArray();
    var _isObject = require_isObject();
    var _isString = require_isString();
    var _isTypedArray = require_isTypedArray();
    var empty = _curry1(function empty2(x) {
      return x != null && typeof x["fantasy-land/empty"] === "function" ? x["fantasy-land/empty"]() : x != null && x.constructor != null && typeof x.constructor["fantasy-land/empty"] === "function" ? x.constructor["fantasy-land/empty"]() : x != null && typeof x.empty === "function" ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === "function" ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? "" : _isObject(x) ? {} : _isArguments(x) ? function() {
        return arguments;
      }() : _isTypedArray(x) ? x.constructor.from("") : void 0;
    });
    module.exports = empty;
  }
});

// node_modules/ramda/src/takeLast.js
var require_takeLast = __commonJS({
  "node_modules/ramda/src/takeLast.js"(exports, module) {
    var _curry2 = require_curry2();
    var drop = require_drop();
    var takeLast = _curry2(function takeLast2(n, xs) {
      return drop(n >= 0 ? xs.length - n : 0, xs);
    });
    module.exports = takeLast;
  }
});

// node_modules/ramda/src/endsWith.js
var require_endsWith = __commonJS({
  "node_modules/ramda/src/endsWith.js"(exports, module) {
    var _curry2 = require_curry2();
    var equals = require_equals2();
    var takeLast = require_takeLast();
    var endsWith = _curry2(function(suffix, list) {
      return equals(takeLast(suffix.length, list), suffix);
    });
    module.exports = endsWith;
  }
});

// node_modules/ramda/src/eqProps.js
var require_eqProps = __commonJS({
  "node_modules/ramda/src/eqProps.js"(exports, module) {
    var _curry3 = require_curry3();
    var equals = require_equals2();
    var eqProps = _curry3(function eqProps2(prop, obj1, obj2) {
      return equals(obj1[prop], obj2[prop]);
    });
    module.exports = eqProps;
  }
});

// node_modules/ramda/src/evolve.js
var require_evolve = __commonJS({
  "node_modules/ramda/src/evolve.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isArray = require_isArray();
    var _isObject = require_isObject();
    var evolve = _curry2(function evolve2(transformations, object) {
      if (!_isObject(object) && !_isArray(object)) {
        return object;
      }
      var result = object instanceof Array ? [] : {};
      var transformation, key, type;
      for (key in object) {
        transformation = transformations[key];
        type = typeof transformation;
        result[key] = type === "function" ? transformation(object[key]) : transformation && type === "object" ? evolve2(transformation, object[key]) : object[key];
      }
      return result;
    });
    module.exports = evolve;
  }
});

// node_modules/ramda/src/internal/_xfind.js
var require_xfind = __commonJS({
  "node_modules/ramda/src/internal/_xfind.js"(exports, module) {
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XFind = function() {
      function XFind2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.found = false;
      }
      XFind2.prototype["@@transducer/init"] = _xfBase.init;
      XFind2.prototype["@@transducer/result"] = function(result) {
        if (!this.found) {
          result = this.xf["@@transducer/step"](result, void 0);
        }
        return this.xf["@@transducer/result"](result);
      };
      XFind2.prototype["@@transducer/step"] = function(result, input) {
        if (this.f(input)) {
          this.found = true;
          result = _reduced(this.xf["@@transducer/step"](result, input));
        }
        return result;
      };
      return XFind2;
    }();
    function _xfind(f) {
      return function(xf) {
        return new XFind(f, xf);
      };
    }
    module.exports = _xfind;
  }
});

// node_modules/ramda/src/find.js
var require_find = __commonJS({
  "node_modules/ramda/src/find.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xfind = require_xfind();
    var find = _curry2(
      _dispatchable(["find"], _xfind, function find2(fn, list) {
        var idx = 0;
        var len = list.length;
        while (idx < len) {
          if (fn(list[idx])) {
            return list[idx];
          }
          idx += 1;
        }
      })
    );
    module.exports = find;
  }
});

// node_modules/ramda/src/internal/_xfindIndex.js
var require_xfindIndex = __commonJS({
  "node_modules/ramda/src/internal/_xfindIndex.js"(exports, module) {
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XFindIndex = function() {
      function XFindIndex2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.idx = -1;
        this.found = false;
      }
      XFindIndex2.prototype["@@transducer/init"] = _xfBase.init;
      XFindIndex2.prototype["@@transducer/result"] = function(result) {
        if (!this.found) {
          result = this.xf["@@transducer/step"](result, -1);
        }
        return this.xf["@@transducer/result"](result);
      };
      XFindIndex2.prototype["@@transducer/step"] = function(result, input) {
        this.idx += 1;
        if (this.f(input)) {
          this.found = true;
          result = _reduced(this.xf["@@transducer/step"](result, this.idx));
        }
        return result;
      };
      return XFindIndex2;
    }();
    function _xfindIndex(f) {
      return function(xf) {
        return new XFindIndex(f, xf);
      };
    }
    module.exports = _xfindIndex;
  }
});

// node_modules/ramda/src/findIndex.js
var require_findIndex = __commonJS({
  "node_modules/ramda/src/findIndex.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xfindIndex = require_xfindIndex();
    var findIndex = _curry2(
      _dispatchable([], _xfindIndex, function findIndex2(fn, list) {
        var idx = 0;
        var len = list.length;
        while (idx < len) {
          if (fn(list[idx])) {
            return idx;
          }
          idx += 1;
        }
        return -1;
      })
    );
    module.exports = findIndex;
  }
});

// node_modules/ramda/src/internal/_xfindLast.js
var require_xfindLast = __commonJS({
  "node_modules/ramda/src/internal/_xfindLast.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XFindLast = function() {
      function XFindLast2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XFindLast2.prototype["@@transducer/init"] = _xfBase.init;
      XFindLast2.prototype["@@transducer/result"] = function(result) {
        return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.last));
      };
      XFindLast2.prototype["@@transducer/step"] = function(result, input) {
        if (this.f(input)) {
          this.last = input;
        }
        return result;
      };
      return XFindLast2;
    }();
    function _xfindLast(f) {
      return function(xf) {
        return new XFindLast(f, xf);
      };
    }
    module.exports = _xfindLast;
  }
});

// node_modules/ramda/src/findLast.js
var require_findLast = __commonJS({
  "node_modules/ramda/src/findLast.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xfindLast = require_xfindLast();
    var findLast = _curry2(
      _dispatchable([], _xfindLast, function findLast2(fn, list) {
        var idx = list.length - 1;
        while (idx >= 0) {
          if (fn(list[idx])) {
            return list[idx];
          }
          idx -= 1;
        }
      })
    );
    module.exports = findLast;
  }
});

// node_modules/ramda/src/internal/_xfindLastIndex.js
var require_xfindLastIndex = __commonJS({
  "node_modules/ramda/src/internal/_xfindLastIndex.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XFindLastIndex = function() {
      function XFindLastIndex2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.idx = -1;
        this.lastIdx = -1;
      }
      XFindLastIndex2.prototype["@@transducer/init"] = _xfBase.init;
      XFindLastIndex2.prototype["@@transducer/result"] = function(result) {
        return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.lastIdx));
      };
      XFindLastIndex2.prototype["@@transducer/step"] = function(result, input) {
        this.idx += 1;
        if (this.f(input)) {
          this.lastIdx = this.idx;
        }
        return result;
      };
      return XFindLastIndex2;
    }();
    function _xfindLastIndex(f) {
      return function(xf) {
        return new XFindLastIndex(f, xf);
      };
    }
    module.exports = _xfindLastIndex;
  }
});

// node_modules/ramda/src/findLastIndex.js
var require_findLastIndex = __commonJS({
  "node_modules/ramda/src/findLastIndex.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xfindLastIndex = require_xfindLastIndex();
    var findLastIndex = _curry2(
      _dispatchable([], _xfindLastIndex, function findLastIndex2(fn, list) {
        var idx = list.length - 1;
        while (idx >= 0) {
          if (fn(list[idx])) {
            return idx;
          }
          idx -= 1;
        }
        return -1;
      })
    );
    module.exports = findLastIndex;
  }
});

// node_modules/ramda/src/flatten.js
var require_flatten = __commonJS({
  "node_modules/ramda/src/flatten.js"(exports, module) {
    var _curry1 = require_curry1();
    var _makeFlat = require_makeFlat();
    var flatten = _curry1(
      _makeFlat(true)
    );
    module.exports = flatten;
  }
});

// node_modules/ramda/src/flip.js
var require_flip = __commonJS({
  "node_modules/ramda/src/flip.js"(exports, module) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var flip = _curry1(function flip2(fn) {
      return curryN(fn.length, function(a, b) {
        var args = Array.prototype.slice.call(arguments, 0);
        args[0] = b;
        args[1] = a;
        return fn.apply(this, args);
      });
    });
    module.exports = flip;
  }
});

// node_modules/ramda/src/forEach.js
var require_forEach = __commonJS({
  "node_modules/ramda/src/forEach.js"(exports, module) {
    var _checkForMethod = require_checkForMethod();
    var _curry2 = require_curry2();
    var forEach = _curry2(
      _checkForMethod("forEach", function forEach2(fn, list) {
        var len = list.length;
        var idx = 0;
        while (idx < len) {
          fn(list[idx]);
          idx += 1;
        }
        return list;
      })
    );
    module.exports = forEach;
  }
});

// node_modules/ramda/src/forEachObjIndexed.js
var require_forEachObjIndexed = __commonJS({
  "node_modules/ramda/src/forEachObjIndexed.js"(exports, module) {
    var _curry2 = require_curry2();
    var keys = require_keys();
    var forEachObjIndexed = _curry2(function forEachObjIndexed2(fn, obj) {
      var keyList = keys(obj);
      var idx = 0;
      while (idx < keyList.length) {
        var key = keyList[idx];
        fn(obj[key], key, obj);
        idx += 1;
      }
      return obj;
    });
    module.exports = forEachObjIndexed;
  }
});

// node_modules/ramda/src/fromPairs.js
var require_fromPairs = __commonJS({
  "node_modules/ramda/src/fromPairs.js"(exports, module) {
    var _curry1 = require_curry1();
    var fromPairs = _curry1(function fromPairs2(pairs) {
      var result = {};
      var idx = 0;
      while (idx < pairs.length) {
        result[pairs[idx][0]] = pairs[idx][1];
        idx += 1;
      }
      return result;
    });
    module.exports = fromPairs;
  }
});

// node_modules/ramda/src/groupBy.js
var require_groupBy = __commonJS({
  "node_modules/ramda/src/groupBy.js"(exports, module) {
    var _checkForMethod = require_checkForMethod();
    var _curry2 = require_curry2();
    var reduceBy = require_reduceBy();
    var groupBy = _curry2(
      _checkForMethod(
        "groupBy",
        reduceBy(function(acc, item) {
          acc.push(item);
          return acc;
        }, [])
      )
    );
    module.exports = groupBy;
  }
});

// node_modules/ramda/src/groupWith.js
var require_groupWith = __commonJS({
  "node_modules/ramda/src/groupWith.js"(exports, module) {
    var _curry2 = require_curry2();
    var groupWith = _curry2(function(fn, list) {
      var res = [];
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        var nextidx = idx + 1;
        while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
          nextidx += 1;
        }
        res.push(list.slice(idx, nextidx));
        idx = nextidx;
      }
      return res;
    });
    module.exports = groupWith;
  }
});

// node_modules/ramda/src/gt.js
var require_gt = __commonJS({
  "node_modules/ramda/src/gt.js"(exports, module) {
    var _curry2 = require_curry2();
    var gt = _curry2(function gt2(a, b) {
      return a > b;
    });
    module.exports = gt;
  }
});

// node_modules/ramda/src/gte.js
var require_gte = __commonJS({
  "node_modules/ramda/src/gte.js"(exports, module) {
    var _curry2 = require_curry2();
    var gte = _curry2(function gte2(a, b) {
      return a >= b;
    });
    module.exports = gte;
  }
});

// node_modules/ramda/src/hasPath.js
var require_hasPath = __commonJS({
  "node_modules/ramda/src/hasPath.js"(exports, module) {
    var _curry2 = require_curry2();
    var _has = require_has();
    var isNil = require_isNil();
    var hasPath = _curry2(function hasPath2(_path, obj) {
      if (_path.length === 0 || isNil(obj)) {
        return false;
      }
      var val = obj;
      var idx = 0;
      while (idx < _path.length) {
        if (!isNil(val) && _has(_path[idx], val)) {
          val = val[_path[idx]];
          idx += 1;
        } else {
          return false;
        }
      }
      return true;
    });
    module.exports = hasPath;
  }
});

// node_modules/ramda/src/has.js
var require_has2 = __commonJS({
  "node_modules/ramda/src/has.js"(exports, module) {
    var _curry2 = require_curry2();
    var hasPath = require_hasPath();
    var has = _curry2(function has2(prop, obj) {
      return hasPath([prop], obj);
    });
    module.exports = has;
  }
});

// node_modules/ramda/src/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/ramda/src/hasIn.js"(exports, module) {
    var _curry2 = require_curry2();
    var isNil = require_isNil();
    var hasIn = _curry2(function hasIn2(prop, obj) {
      if (isNil(obj)) {
        return false;
      }
      return prop in obj;
    });
    module.exports = hasIn;
  }
});

// node_modules/ramda/src/identical.js
var require_identical = __commonJS({
  "node_modules/ramda/src/identical.js"(exports, module) {
    var _objectIs = require_objectIs();
    var identical = function(a, b) {
      switch (arguments.length) {
        case 0:
          return identical;
        case 1:
          return function() {
            return function unaryIdentical(_b) {
              switch (arguments.length) {
                case 0:
                  return unaryIdentical;
                default:
                  return _objectIs(a, _b);
              }
            };
          }();
        default:
          return _objectIs(a, b);
      }
    };
    module.exports = identical;
  }
});

// node_modules/ramda/src/ifElse.js
var require_ifElse = __commonJS({
  "node_modules/ramda/src/ifElse.js"(exports, module) {
    var _curry3 = require_curry3();
    var curryN = require_curryN2();
    var ifElse = _curry3(function ifElse2(condition, onTrue, onFalse) {
      return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
        return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
      });
    });
    module.exports = ifElse;
  }
});

// node_modules/ramda/src/inc.js
var require_inc = __commonJS({
  "node_modules/ramda/src/inc.js"(exports, module) {
    var add = require_add();
    var inc = add(1);
    module.exports = inc;
  }
});

// node_modules/ramda/src/includes.js
var require_includes2 = __commonJS({
  "node_modules/ramda/src/includes.js"(exports, module) {
    var _includes = require_includes();
    var _curry2 = require_curry2();
    var includes = _curry2(_includes);
    module.exports = includes;
  }
});

// node_modules/ramda/src/indexBy.js
var require_indexBy = __commonJS({
  "node_modules/ramda/src/indexBy.js"(exports, module) {
    var reduceBy = require_reduceBy();
    var indexBy = reduceBy(function(acc, elem) {
      return elem;
    }, null);
    module.exports = indexBy;
  }
});

// node_modules/ramda/src/indexOf.js
var require_indexOf2 = __commonJS({
  "node_modules/ramda/src/indexOf.js"(exports, module) {
    var _curry2 = require_curry2();
    var _indexOf = require_indexOf();
    var _isArray = require_isArray();
    var indexOf = _curry2(function indexOf2(target, xs) {
      return typeof xs.indexOf === "function" && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
    });
    module.exports = indexOf;
  }
});

// node_modules/ramda/src/init.js
var require_init = __commonJS({
  "node_modules/ramda/src/init.js"(exports, module) {
    var slice = require_slice();
    var init = slice(0, -1);
    module.exports = init;
  }
});

// node_modules/ramda/src/innerJoin.js
var require_innerJoin = __commonJS({
  "node_modules/ramda/src/innerJoin.js"(exports, module) {
    var _includesWith = require_includesWith();
    var _curry3 = require_curry3();
    var _filter = require_filter();
    var innerJoin = _curry3(function innerJoin2(pred, xs, ys) {
      return _filter(function(x) {
        return _includesWith(pred, x, ys);
      }, xs);
    });
    module.exports = innerJoin;
  }
});

// node_modules/ramda/src/insert.js
var require_insert = __commonJS({
  "node_modules/ramda/src/insert.js"(exports, module) {
    var _curry3 = require_curry3();
    var insert = _curry3(function insert2(idx, elt, list) {
      idx = idx < list.length && idx >= 0 ? idx : list.length;
      var result = Array.prototype.slice.call(list, 0);
      result.splice(idx, 0, elt);
      return result;
    });
    module.exports = insert;
  }
});

// node_modules/ramda/src/insertAll.js
var require_insertAll = __commonJS({
  "node_modules/ramda/src/insertAll.js"(exports, module) {
    var _curry3 = require_curry3();
    var insertAll = _curry3(function insertAll2(idx, elts, list) {
      idx = idx < list.length && idx >= 0 ? idx : list.length;
      return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
    });
    module.exports = insertAll;
  }
});

// node_modules/ramda/src/internal/_xuniqBy.js
var require_xuniqBy = __commonJS({
  "node_modules/ramda/src/internal/_xuniqBy.js"(exports, module) {
    var _Set = require_Set();
    var _xfBase = require_xfBase();
    var XUniqBy = function() {
      function XUniqBy2(f, xf) {
        this.xf = xf;
        this.f = f;
        this.set = new _Set();
      }
      XUniqBy2.prototype["@@transducer/init"] = _xfBase.init;
      XUniqBy2.prototype["@@transducer/result"] = _xfBase.result;
      XUniqBy2.prototype["@@transducer/step"] = function(result, input) {
        return this.set.add(this.f(input)) ? this.xf["@@transducer/step"](result, input) : result;
      };
      return XUniqBy2;
    }();
    function _xuniqBy(f) {
      return function(xf) {
        return new XUniqBy(f, xf);
      };
    }
    module.exports = _xuniqBy;
  }
});

// node_modules/ramda/src/uniqBy.js
var require_uniqBy = __commonJS({
  "node_modules/ramda/src/uniqBy.js"(exports, module) {
    var _Set = require_Set();
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xuniqBy = require_xuniqBy();
    var uniqBy = _curry2(
      _dispatchable([], _xuniqBy, function(fn, list) {
        var set = new _Set();
        var result = [];
        var idx = 0;
        var appliedItem, item;
        while (idx < list.length) {
          item = list[idx];
          appliedItem = fn(item);
          if (set.add(appliedItem)) {
            result.push(item);
          }
          idx += 1;
        }
        return result;
      })
    );
    module.exports = uniqBy;
  }
});

// node_modules/ramda/src/uniq.js
var require_uniq = __commonJS({
  "node_modules/ramda/src/uniq.js"(exports, module) {
    var identity = require_identity2();
    var uniqBy = require_uniqBy();
    var uniq = uniqBy(identity);
    module.exports = uniq;
  }
});

// node_modules/ramda/src/intersection.js
var require_intersection = __commonJS({
  "node_modules/ramda/src/intersection.js"(exports, module) {
    var _curry2 = require_curry2();
    var _filter = require_filter();
    var _Set = require_Set();
    var uniq = require_uniq();
    var intersection = _curry2(function intersection2(list1, list2) {
      var toKeep = new _Set();
      for (var i = 0; i < list1.length; i += 1) {
        toKeep.add(list1[i]);
      }
      return uniq(_filter(toKeep.has.bind(toKeep), list2));
    });
    module.exports = intersection;
  }
});

// node_modules/ramda/src/intersperse.js
var require_intersperse = __commonJS({
  "node_modules/ramda/src/intersperse.js"(exports, module) {
    var _checkForMethod = require_checkForMethod();
    var _curry2 = require_curry2();
    var intersperse = _curry2(
      _checkForMethod("intersperse", function intersperse2(separator, list) {
        var out = [];
        var idx = 0;
        var length = list.length;
        while (idx < length) {
          if (idx === length - 1) {
            out.push(list[idx]);
          } else {
            out.push(list[idx], separator);
          }
          idx += 1;
        }
        return out;
      })
    );
    module.exports = intersperse;
  }
});

// node_modules/ramda/src/internal/_objectAssign.js
var require_objectAssign = __commonJS({
  "node_modules/ramda/src/internal/_objectAssign.js"(exports, module) {
    var _has = require_has();
    function _objectAssign(target) {
      if (target == null) {
        throw new TypeError("Cannot convert undefined or null to object");
      }
      var output = Object(target);
      var idx = 1;
      var length = arguments.length;
      while (idx < length) {
        var source = arguments[idx];
        if (source != null) {
          for (var nextKey in source) {
            if (_has(nextKey, source)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
        idx += 1;
      }
      return output;
    }
    module.exports = typeof Object.assign === "function" ? Object.assign : _objectAssign;
  }
});

// node_modules/ramda/src/objOf.js
var require_objOf = __commonJS({
  "node_modules/ramda/src/objOf.js"(exports, module) {
    var _curry2 = require_curry2();
    var objOf = _curry2(function objOf2(key, val) {
      var obj = {};
      obj[key] = val;
      return obj;
    });
    module.exports = objOf;
  }
});

// node_modules/ramda/src/internal/_stepCat.js
var require_stepCat = __commonJS({
  "node_modules/ramda/src/internal/_stepCat.js"(exports, module) {
    var _objectAssign = require_objectAssign();
    var _identity = require_identity();
    var _isArrayLike = require_isArrayLike();
    var _isTransformer = require_isTransformer();
    var objOf = require_objOf();
    var _stepCatArray = {
      "@@transducer/init": Array,
      "@@transducer/step": function(xs, x) {
        xs.push(x);
        return xs;
      },
      "@@transducer/result": _identity
    };
    var _stepCatString = {
      "@@transducer/init": String,
      "@@transducer/step": function(a, b) {
        return a + b;
      },
      "@@transducer/result": _identity
    };
    var _stepCatObject = {
      "@@transducer/init": Object,
      "@@transducer/step": function(result, input) {
        return _objectAssign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);
      },
      "@@transducer/result": _identity
    };
    function _stepCat(obj) {
      if (_isTransformer(obj)) {
        return obj;
      }
      if (_isArrayLike(obj)) {
        return _stepCatArray;
      }
      if (typeof obj === "string") {
        return _stepCatString;
      }
      if (typeof obj === "object") {
        return _stepCatObject;
      }
      throw new Error("Cannot create transformer for " + obj);
    }
    module.exports = _stepCat;
  }
});

// node_modules/ramda/src/into.js
var require_into = __commonJS({
  "node_modules/ramda/src/into.js"(exports, module) {
    var _curry3 = require_curry3();
    var _isTransformer = require_isTransformer();
    var _xReduce = require_xReduce();
    var _stepCat = require_stepCat();
    var into = _curry3(function into2(acc, transducer, list) {
      var xf = transducer(_isTransformer(acc) ? acc : _stepCat(acc));
      return _xReduce(xf, xf["@@transducer/init"](), list);
    });
    module.exports = into;
  }
});

// node_modules/ramda/src/invert.js
var require_invert = __commonJS({
  "node_modules/ramda/src/invert.js"(exports, module) {
    var _curry1 = require_curry1();
    var _has = require_has();
    var keys = require_keys();
    var invert = _curry1(function invert2(obj) {
      var props = keys(obj);
      var len = props.length;
      var idx = 0;
      var out = {};
      while (idx < len) {
        var key = props[idx];
        var val = obj[key];
        var list = _has(val, out) ? out[val] : out[val] = [];
        list[list.length] = key;
        idx += 1;
      }
      return out;
    });
    module.exports = invert;
  }
});

// node_modules/ramda/src/invertObj.js
var require_invertObj = __commonJS({
  "node_modules/ramda/src/invertObj.js"(exports, module) {
    var _curry1 = require_curry1();
    var keys = require_keys();
    var invertObj = _curry1(function invertObj2(obj) {
      var props = keys(obj);
      var len = props.length;
      var idx = 0;
      var out = {};
      while (idx < len) {
        var key = props[idx];
        out[obj[key]] = key;
        idx += 1;
      }
      return out;
    });
    module.exports = invertObj;
  }
});

// node_modules/ramda/src/invoker.js
var require_invoker = __commonJS({
  "node_modules/ramda/src/invoker.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isFunction = require_isFunction();
    var curryN = require_curryN2();
    var toString = require_toString2();
    var invoker = _curry2(function invoker2(arity, method) {
      return curryN(arity + 1, function() {
        var target = arguments[arity];
        if (target != null && _isFunction(target[method])) {
          return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
        }
        throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
      });
    });
    module.exports = invoker;
  }
});

// node_modules/ramda/src/is.js
var require_is = __commonJS({
  "node_modules/ramda/src/is.js"(exports, module) {
    var _curry2 = require_curry2();
    var is = _curry2(function is2(Ctor, val) {
      return val instanceof Ctor || val != null && (val.constructor === Ctor || Ctor.name === "Object" && typeof val === "object");
    });
    module.exports = is;
  }
});

// node_modules/ramda/src/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/ramda/src/isEmpty.js"(exports, module) {
    var _curry1 = require_curry1();
    var empty = require_empty();
    var equals = require_equals2();
    var isEmpty = _curry1(function isEmpty2(x) {
      return x != null && equals(x, empty(x));
    });
    module.exports = isEmpty;
  }
});

// node_modules/ramda/src/isNotNil.js
var require_isNotNil = __commonJS({
  "node_modules/ramda/src/isNotNil.js"(exports, module) {
    var isNil = require_isNil();
    var _curry1 = require_curry1();
    var isNotNil = _curry1(function isNotNil2(x) {
      return !isNil(x);
    });
    module.exports = isNotNil;
  }
});

// node_modules/ramda/src/join.js
var require_join = __commonJS({
  "node_modules/ramda/src/join.js"(exports, module) {
    var invoker = require_invoker();
    var join = invoker(1, "join");
    module.exports = join;
  }
});

// node_modules/ramda/src/juxt.js
var require_juxt = __commonJS({
  "node_modules/ramda/src/juxt.js"(exports, module) {
    var _curry1 = require_curry1();
    var converge = require_converge();
    var juxt = _curry1(function juxt2(fns) {
      return converge(function() {
        return Array.prototype.slice.call(arguments, 0);
      }, fns);
    });
    module.exports = juxt;
  }
});

// node_modules/ramda/src/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/ramda/src/keysIn.js"(exports, module) {
    var _curry1 = require_curry1();
    var keysIn = _curry1(function keysIn2(obj) {
      var prop;
      var ks = [];
      for (prop in obj) {
        ks[ks.length] = prop;
      }
      return ks;
    });
    module.exports = keysIn;
  }
});

// node_modules/ramda/src/lastIndexOf.js
var require_lastIndexOf = __commonJS({
  "node_modules/ramda/src/lastIndexOf.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isArray = require_isArray();
    var equals = require_equals2();
    var lastIndexOf = _curry2(function lastIndexOf2(target, xs) {
      if (typeof xs.lastIndexOf === "function" && !_isArray(xs)) {
        return xs.lastIndexOf(target);
      } else {
        var idx = xs.length - 1;
        while (idx >= 0) {
          if (equals(xs[idx], target)) {
            return idx;
          }
          idx -= 1;
        }
        return -1;
      }
    });
    module.exports = lastIndexOf;
  }
});

// node_modules/ramda/src/internal/_isNumber.js
var require_isNumber = __commonJS({
  "node_modules/ramda/src/internal/_isNumber.js"(exports, module) {
    function _isNumber(x) {
      return Object.prototype.toString.call(x) === "[object Number]";
    }
    module.exports = _isNumber;
  }
});

// node_modules/ramda/src/length.js
var require_length = __commonJS({
  "node_modules/ramda/src/length.js"(exports, module) {
    var _curry1 = require_curry1();
    var _isNumber = require_isNumber();
    var length = _curry1(function length2(list) {
      return list != null && _isNumber(list.length) ? list.length : NaN;
    });
    module.exports = length;
  }
});

// node_modules/ramda/src/lens.js
var require_lens = __commonJS({
  "node_modules/ramda/src/lens.js"(exports, module) {
    var _curry2 = require_curry2();
    var map = require_map2();
    var lens = _curry2(function lens2(getter, setter) {
      return function(toFunctorFn) {
        return function(target) {
          return map(function(focus) {
            return setter(focus, target);
          }, toFunctorFn(getter(target)));
        };
      };
    });
    module.exports = lens;
  }
});

// node_modules/ramda/src/update.js
var require_update = __commonJS({
  "node_modules/ramda/src/update.js"(exports, module) {
    var _curry3 = require_curry3();
    var adjust = require_adjust();
    var always = require_always();
    var update = _curry3(function update2(idx, x, list) {
      return adjust(idx, always(x), list);
    });
    module.exports = update;
  }
});

// node_modules/ramda/src/lensIndex.js
var require_lensIndex = __commonJS({
  "node_modules/ramda/src/lensIndex.js"(exports, module) {
    var _curry1 = require_curry1();
    var lens = require_lens();
    var nth = require_nth();
    var update = require_update();
    var lensIndex = _curry1(function lensIndex2(n) {
      return lens(nth(n), update(n));
    });
    module.exports = lensIndex;
  }
});

// node_modules/ramda/src/paths.js
var require_paths = __commonJS({
  "node_modules/ramda/src/paths.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isInteger = require_isInteger();
    var nth = require_nth();
    var paths = _curry2(function paths2(pathsArray, obj) {
      return pathsArray.map(function(paths3) {
        var val = obj;
        var idx = 0;
        var p;
        while (idx < paths3.length) {
          if (val == null) {
            return;
          }
          p = paths3[idx];
          val = _isInteger(p) ? nth(p, val) : val[p];
          idx += 1;
        }
        return val;
      });
    });
    module.exports = paths;
  }
});

// node_modules/ramda/src/path.js
var require_path = __commonJS({
  "node_modules/ramda/src/path.js"(exports, module) {
    var _curry2 = require_curry2();
    var paths = require_paths();
    var path = _curry2(function path2(pathAr, obj) {
      return paths([pathAr], obj)[0];
    });
    module.exports = path;
  }
});

// node_modules/ramda/src/lensPath.js
var require_lensPath = __commonJS({
  "node_modules/ramda/src/lensPath.js"(exports, module) {
    var _curry1 = require_curry1();
    var assocPath = require_assocPath();
    var lens = require_lens();
    var path = require_path();
    var lensPath = _curry1(function lensPath2(p) {
      return lens(path(p), assocPath(p));
    });
    module.exports = lensPath;
  }
});

// node_modules/ramda/src/lensProp.js
var require_lensProp = __commonJS({
  "node_modules/ramda/src/lensProp.js"(exports, module) {
    var _curry1 = require_curry1();
    var assoc = require_assoc2();
    var lens = require_lens();
    var prop = require_prop();
    var lensProp = _curry1(function lensProp2(k) {
      return lens(prop(k), assoc(k));
    });
    module.exports = lensProp;
  }
});

// node_modules/ramda/src/lt.js
var require_lt = __commonJS({
  "node_modules/ramda/src/lt.js"(exports, module) {
    var _curry2 = require_curry2();
    var lt = _curry2(function lt2(a, b) {
      return a < b;
    });
    module.exports = lt;
  }
});

// node_modules/ramda/src/lte.js
var require_lte = __commonJS({
  "node_modules/ramda/src/lte.js"(exports, module) {
    var _curry2 = require_curry2();
    var lte = _curry2(function lte2(a, b) {
      return a <= b;
    });
    module.exports = lte;
  }
});

// node_modules/ramda/src/mapAccum.js
var require_mapAccum = __commonJS({
  "node_modules/ramda/src/mapAccum.js"(exports, module) {
    var _curry3 = require_curry3();
    var mapAccum = _curry3(function mapAccum2(fn, acc, list) {
      var idx = 0;
      var len = list.length;
      var result = [];
      var tuple = [acc];
      while (idx < len) {
        tuple = fn(tuple[0], list[idx]);
        result[idx] = tuple[1];
        idx += 1;
      }
      return [tuple[0], result];
    });
    module.exports = mapAccum;
  }
});

// node_modules/ramda/src/mapAccumRight.js
var require_mapAccumRight = __commonJS({
  "node_modules/ramda/src/mapAccumRight.js"(exports, module) {
    var _curry3 = require_curry3();
    var mapAccumRight = _curry3(function mapAccumRight2(fn, acc, list) {
      var idx = list.length - 1;
      var result = [];
      var tuple = [acc];
      while (idx >= 0) {
        tuple = fn(tuple[0], list[idx]);
        result[idx] = tuple[1];
        idx -= 1;
      }
      return [tuple[0], result];
    });
    module.exports = mapAccumRight;
  }
});

// node_modules/ramda/src/mapObjIndexed.js
var require_mapObjIndexed = __commonJS({
  "node_modules/ramda/src/mapObjIndexed.js"(exports, module) {
    var _arrayReduce = require_arrayReduce();
    var _curry2 = require_curry2();
    var keys = require_keys();
    var mapObjIndexed = _curry2(function mapObjIndexed2(fn, obj) {
      return _arrayReduce(function(acc, key) {
        acc[key] = fn(obj[key], key, obj);
        return acc;
      }, {}, keys(obj));
    });
    module.exports = mapObjIndexed;
  }
});

// node_modules/ramda/src/match.js
var require_match = __commonJS({
  "node_modules/ramda/src/match.js"(exports, module) {
    var _curry2 = require_curry2();
    var match = _curry2(function match2(rx, str) {
      return str.match(rx) || [];
    });
    module.exports = match;
  }
});

// node_modules/ramda/src/mathMod.js
var require_mathMod = __commonJS({
  "node_modules/ramda/src/mathMod.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isInteger = require_isInteger();
    var mathMod = _curry2(function mathMod2(m, p) {
      if (!_isInteger(m)) {
        return NaN;
      }
      if (!_isInteger(p) || p < 1) {
        return NaN;
      }
      return (m % p + p) % p;
    });
    module.exports = mathMod;
  }
});

// node_modules/ramda/src/maxBy.js
var require_maxBy = __commonJS({
  "node_modules/ramda/src/maxBy.js"(exports, module) {
    var _curry3 = require_curry3();
    var max = require_max();
    var maxBy = _curry3(function maxBy2(f, a, b) {
      var resultB = f(b);
      return max(f(a), resultB) === resultB ? b : a;
    });
    module.exports = maxBy;
  }
});

// node_modules/ramda/src/sum.js
var require_sum = __commonJS({
  "node_modules/ramda/src/sum.js"(exports, module) {
    var add = require_add();
    var reduce = require_reduce();
    var sum = reduce(add, 0);
    module.exports = sum;
  }
});

// node_modules/ramda/src/mean.js
var require_mean = __commonJS({
  "node_modules/ramda/src/mean.js"(exports, module) {
    var _curry1 = require_curry1();
    var sum = require_sum();
    var mean = _curry1(function mean2(list) {
      return sum(list) / list.length;
    });
    module.exports = mean;
  }
});

// node_modules/ramda/src/median.js
var require_median = __commonJS({
  "node_modules/ramda/src/median.js"(exports, module) {
    var _curry1 = require_curry1();
    var mean = require_mean();
    var median = _curry1(function median2(list) {
      var len = list.length;
      if (len === 0) {
        return NaN;
      }
      var width = 2 - len % 2;
      var idx = (len - width) / 2;
      return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
      }).slice(idx, idx + width));
    });
    module.exports = median;
  }
});

// node_modules/ramda/src/memoizeWith.js
var require_memoizeWith = __commonJS({
  "node_modules/ramda/src/memoizeWith.js"(exports, module) {
    var _arity = require_arity();
    var _curry2 = require_curry2();
    var _has = require_has();
    var memoizeWith = _curry2(function memoizeWith2(keyGen, fn) {
      var cache = {};
      return _arity(fn.length, function() {
        var key = keyGen.apply(this, arguments);
        if (!_has(key, cache)) {
          cache[key] = fn.apply(this, arguments);
        }
        return cache[key];
      });
    });
    module.exports = memoizeWith;
  }
});

// node_modules/ramda/src/mergeAll.js
var require_mergeAll = __commonJS({
  "node_modules/ramda/src/mergeAll.js"(exports, module) {
    var _objectAssign = require_objectAssign();
    var _curry1 = require_curry1();
    var mergeAll = _curry1(function mergeAll2(list) {
      return _objectAssign.apply(null, [{}].concat(list));
    });
    module.exports = mergeAll;
  }
});

// node_modules/ramda/src/mergeWithKey.js
var require_mergeWithKey = __commonJS({
  "node_modules/ramda/src/mergeWithKey.js"(exports, module) {
    var _curry3 = require_curry3();
    var _has = require_has();
    var mergeWithKey = _curry3(function mergeWithKey2(fn, l, r) {
      var result = {};
      var k;
      l = l || {};
      r = r || {};
      for (k in l) {
        if (_has(k, l)) {
          result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
        }
      }
      for (k in r) {
        if (_has(k, r) && !_has(k, result)) {
          result[k] = r[k];
        }
      }
      return result;
    });
    module.exports = mergeWithKey;
  }
});

// node_modules/ramda/src/mergeDeepWithKey.js
var require_mergeDeepWithKey = __commonJS({
  "node_modules/ramda/src/mergeDeepWithKey.js"(exports, module) {
    var _curry3 = require_curry3();
    var _isObject = require_isObject();
    var mergeWithKey = require_mergeWithKey();
    var mergeDeepWithKey = _curry3(function mergeDeepWithKey2(fn, lObj, rObj) {
      return mergeWithKey(function(k, lVal, rVal) {
        if (_isObject(lVal) && _isObject(rVal)) {
          return mergeDeepWithKey2(fn, lVal, rVal);
        } else {
          return fn(k, lVal, rVal);
        }
      }, lObj, rObj);
    });
    module.exports = mergeDeepWithKey;
  }
});

// node_modules/ramda/src/mergeDeepLeft.js
var require_mergeDeepLeft = __commonJS({
  "node_modules/ramda/src/mergeDeepLeft.js"(exports, module) {
    var _curry2 = require_curry2();
    var mergeDeepWithKey = require_mergeDeepWithKey();
    var mergeDeepLeft = _curry2(function mergeDeepLeft2(lObj, rObj) {
      return mergeDeepWithKey(function(k, lVal, rVal) {
        return lVal;
      }, lObj, rObj);
    });
    module.exports = mergeDeepLeft;
  }
});

// node_modules/ramda/src/mergeDeepRight.js
var require_mergeDeepRight = __commonJS({
  "node_modules/ramda/src/mergeDeepRight.js"(exports, module) {
    var _curry2 = require_curry2();
    var mergeDeepWithKey = require_mergeDeepWithKey();
    var mergeDeepRight = _curry2(function mergeDeepRight2(lObj, rObj) {
      return mergeDeepWithKey(function(k, lVal, rVal) {
        return rVal;
      }, lObj, rObj);
    });
    module.exports = mergeDeepRight;
  }
});

// node_modules/ramda/src/mergeDeepWith.js
var require_mergeDeepWith = __commonJS({
  "node_modules/ramda/src/mergeDeepWith.js"(exports, module) {
    var _curry3 = require_curry3();
    var mergeDeepWithKey = require_mergeDeepWithKey();
    var mergeDeepWith = _curry3(function mergeDeepWith2(fn, lObj, rObj) {
      return mergeDeepWithKey(function(k, lVal, rVal) {
        return fn(lVal, rVal);
      }, lObj, rObj);
    });
    module.exports = mergeDeepWith;
  }
});

// node_modules/ramda/src/mergeLeft.js
var require_mergeLeft = __commonJS({
  "node_modules/ramda/src/mergeLeft.js"(exports, module) {
    var _objectAssign = require_objectAssign();
    var _curry2 = require_curry2();
    var mergeLeft = _curry2(function mergeLeft2(l, r) {
      return _objectAssign({}, r, l);
    });
    module.exports = mergeLeft;
  }
});

// node_modules/ramda/src/mergeRight.js
var require_mergeRight = __commonJS({
  "node_modules/ramda/src/mergeRight.js"(exports, module) {
    var _objectAssign = require_objectAssign();
    var _curry2 = require_curry2();
    var mergeRight = _curry2(function mergeRight2(l, r) {
      return _objectAssign({}, l, r);
    });
    module.exports = mergeRight;
  }
});

// node_modules/ramda/src/mergeWith.js
var require_mergeWith = __commonJS({
  "node_modules/ramda/src/mergeWith.js"(exports, module) {
    var _curry3 = require_curry3();
    var mergeWithKey = require_mergeWithKey();
    var mergeWith = _curry3(function mergeWith2(fn, l, r) {
      return mergeWithKey(function(_, _l, _r) {
        return fn(_l, _r);
      }, l, r);
    });
    module.exports = mergeWith;
  }
});

// node_modules/ramda/src/min.js
var require_min = __commonJS({
  "node_modules/ramda/src/min.js"(exports, module) {
    var _curry2 = require_curry2();
    var toString = require_toString2();
    var min = _curry2(function min2(a, b) {
      if (a === b) {
        return a;
      }
      function safeMin(x, y) {
        if (x < y !== y < x) {
          return y < x ? y : x;
        }
        return void 0;
      }
      var minByValue = safeMin(a, b);
      if (minByValue !== void 0) {
        return minByValue;
      }
      var minByType = safeMin(typeof a, typeof b);
      if (minByType !== void 0) {
        return minByType === typeof a ? a : b;
      }
      var stringA = toString(a);
      var minByStringValue = safeMin(stringA, toString(b));
      if (minByStringValue !== void 0) {
        return minByStringValue === stringA ? a : b;
      }
      return a;
    });
    module.exports = min;
  }
});

// node_modules/ramda/src/minBy.js
var require_minBy = __commonJS({
  "node_modules/ramda/src/minBy.js"(exports, module) {
    var _curry3 = require_curry3();
    var min = require_min();
    var minBy = _curry3(function minBy2(f, a, b) {
      var resultB = f(b);
      return min(f(a), resultB) === resultB ? b : a;
    });
    module.exports = minBy;
  }
});

// node_modules/ramda/src/internal/_modify.js
var require_modify = __commonJS({
  "node_modules/ramda/src/internal/_modify.js"(exports, module) {
    var _isArray = require_isArray();
    var _isInteger = require_isInteger();
    function _modify(prop, fn, obj) {
      if (_isInteger(prop) && _isArray(obj)) {
        var arr = [].concat(obj);
        arr[prop] = fn(arr[prop]);
        return arr;
      }
      var result = {};
      for (var p in obj) {
        result[p] = obj[p];
      }
      result[prop] = fn(result[prop]);
      return result;
    }
    module.exports = _modify;
  }
});

// node_modules/ramda/src/modifyPath.js
var require_modifyPath = __commonJS({
  "node_modules/ramda/src/modifyPath.js"(exports, module) {
    var _curry3 = require_curry3();
    var _isArray = require_isArray();
    var _isObject = require_isObject();
    var _has = require_has();
    var _assoc = require_assoc();
    var _modify = require_modify();
    var modifyPath = _curry3(function modifyPath2(path, fn, object) {
      if (!_isObject(object) && !_isArray(object) || path.length === 0) {
        return object;
      }
      var idx = path[0];
      if (!_has(idx, object)) {
        return object;
      }
      if (path.length === 1) {
        return _modify(idx, fn, object);
      }
      var val = modifyPath2(Array.prototype.slice.call(path, 1), fn, object[idx]);
      if (val === object[idx]) {
        return object;
      }
      return _assoc(idx, val, object);
    });
    module.exports = modifyPath;
  }
});

// node_modules/ramda/src/modify.js
var require_modify2 = __commonJS({
  "node_modules/ramda/src/modify.js"(exports, module) {
    var _curry3 = require_curry3();
    var modifyPath = require_modifyPath();
    var modify = _curry3(function modify2(prop, fn, object) {
      return modifyPath([prop], fn, object);
    });
    module.exports = modify;
  }
});

// node_modules/ramda/src/modulo.js
var require_modulo = __commonJS({
  "node_modules/ramda/src/modulo.js"(exports, module) {
    var _curry2 = require_curry2();
    var modulo = _curry2(function modulo2(a, b) {
      return a % b;
    });
    module.exports = modulo;
  }
});

// node_modules/ramda/src/move.js
var require_move = __commonJS({
  "node_modules/ramda/src/move.js"(exports, module) {
    var _curry3 = require_curry3();
    var move = _curry3(function(from, to, list) {
      var length = list.length;
      var result = list.slice();
      var positiveFrom = from < 0 ? length + from : from;
      var positiveTo = to < 0 ? length + to : to;
      var item = result.splice(positiveFrom, 1);
      return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));
    });
    module.exports = move;
  }
});

// node_modules/ramda/src/multiply.js
var require_multiply = __commonJS({
  "node_modules/ramda/src/multiply.js"(exports, module) {
    var _curry2 = require_curry2();
    var multiply = _curry2(function multiply2(a, b) {
      return a * b;
    });
    module.exports = multiply;
  }
});

// node_modules/ramda/src/partialObject.js
var require_partialObject = __commonJS({
  "node_modules/ramda/src/partialObject.js"(exports, module) {
    var mergeDeepRight = require_mergeDeepRight();
    var _curry2 = require_curry2();
    var partialObject = _curry2((f, o) => (props) => f.call(exports, mergeDeepRight(o, props)));
    module.exports = partialObject;
  }
});

// node_modules/ramda/src/negate.js
var require_negate = __commonJS({
  "node_modules/ramda/src/negate.js"(exports, module) {
    var _curry1 = require_curry1();
    var negate = _curry1(function negate2(n) {
      return -n;
    });
    module.exports = negate;
  }
});

// node_modules/ramda/src/none.js
var require_none = __commonJS({
  "node_modules/ramda/src/none.js"(exports, module) {
    var _complement = require_complement();
    var _curry2 = require_curry2();
    var all = require_all();
    var none = _curry2(function none2(fn, input) {
      return all(_complement(fn), input);
    });
    module.exports = none;
  }
});

// node_modules/ramda/src/nthArg.js
var require_nthArg = __commonJS({
  "node_modules/ramda/src/nthArg.js"(exports, module) {
    var _curry1 = require_curry1();
    var curryN = require_curryN2();
    var nth = require_nth();
    var nthArg = _curry1(function nthArg2(n) {
      var arity = n < 0 ? 1 : n + 1;
      return curryN(arity, function() {
        return nth(n, arguments);
      });
    });
    module.exports = nthArg;
  }
});

// node_modules/ramda/src/o.js
var require_o = __commonJS({
  "node_modules/ramda/src/o.js"(exports, module) {
    var _curry3 = require_curry3();
    var o = _curry3(function o2(f, g, x) {
      return f(g(x));
    });
    module.exports = o;
  }
});

// node_modules/ramda/src/of.js
var require_of = __commonJS({
  "node_modules/ramda/src/of.js"(exports, module) {
    var _curry2 = require_curry2();
    var of = _curry2(function of2(Ctor, val) {
      return typeof Ctor["fantasy-land/of"] === "function" ? Ctor["fantasy-land/of"](val) : typeof Ctor.of === "function" ? Ctor.of(val) : [val];
    });
    module.exports = of;
  }
});

// node_modules/ramda/src/omit.js
var require_omit = __commonJS({
  "node_modules/ramda/src/omit.js"(exports, module) {
    var _curry2 = require_curry2();
    var omit = _curry2(function omit2(names, obj) {
      var result = {};
      var index = {};
      var idx = 0;
      var len = names.length;
      while (idx < len) {
        index[names[idx]] = 1;
        idx += 1;
      }
      for (var prop in obj) {
        if (!index.hasOwnProperty(prop)) {
          result[prop] = obj[prop];
        }
      }
      return result;
    });
    module.exports = omit;
  }
});

// node_modules/ramda/src/on.js
var require_on = __commonJS({
  "node_modules/ramda/src/on.js"(exports, module) {
    var curryN = require_curryN();
    var on = curryN(4, [], function on2(f, g, a, b) {
      return f(g(a), g(b));
    });
    module.exports = on;
  }
});

// node_modules/ramda/src/once.js
var require_once = __commonJS({
  "node_modules/ramda/src/once.js"(exports, module) {
    var _arity = require_arity();
    var _curry1 = require_curry1();
    var once = _curry1(function once2(fn) {
      var called = false;
      var result;
      return _arity(fn.length, function() {
        if (called) {
          return result;
        }
        called = true;
        result = fn.apply(this, arguments);
        return result;
      });
    });
    module.exports = once;
  }
});

// node_modules/ramda/src/internal/_assertPromise.js
var require_assertPromise = __commonJS({
  "node_modules/ramda/src/internal/_assertPromise.js"(exports, module) {
    var _isFunction = require_isFunction();
    var _toString = require_toString();
    function _assertPromise(name, p) {
      if (p == null || !_isFunction(p.then)) {
        throw new TypeError("`" + name + "` expected a Promise, received " + _toString(p, []));
      }
    }
    module.exports = _assertPromise;
  }
});

// node_modules/ramda/src/otherwise.js
var require_otherwise = __commonJS({
  "node_modules/ramda/src/otherwise.js"(exports, module) {
    var _curry2 = require_curry2();
    var _assertPromise = require_assertPromise();
    var otherwise = _curry2(function otherwise2(f, p) {
      _assertPromise("otherwise", p);
      return p.then(null, f);
    });
    module.exports = otherwise;
  }
});

// node_modules/ramda/src/over.js
var require_over = __commonJS({
  "node_modules/ramda/src/over.js"(exports, module) {
    var _curry3 = require_curry3();
    var Identity = function(x) {
      return {
        value: x,
        map: function(f) {
          return Identity(f(x));
        }
      };
    };
    var over = _curry3(function over2(lens, f, x) {
      return lens(function(y) {
        return Identity(f(y));
      })(x).value;
    });
    module.exports = over;
  }
});

// node_modules/ramda/src/pair.js
var require_pair = __commonJS({
  "node_modules/ramda/src/pair.js"(exports, module) {
    var _curry2 = require_curry2();
    var pair = _curry2(function pair2(fst, snd) {
      return [fst, snd];
    });
    module.exports = pair;
  }
});

// node_modules/ramda/src/internal/_createPartialApplicator.js
var require_createPartialApplicator = __commonJS({
  "node_modules/ramda/src/internal/_createPartialApplicator.js"(exports, module) {
    var _arity = require_arity();
    var _curry2 = require_curry2();
    function _createPartialApplicator(concat) {
      return _curry2(function(fn, args) {
        return _arity(Math.max(0, fn.length - args.length), function() {
          return fn.apply(this, concat(args, arguments));
        });
      });
    }
    module.exports = _createPartialApplicator;
  }
});

// node_modules/ramda/src/partial.js
var require_partial = __commonJS({
  "node_modules/ramda/src/partial.js"(exports, module) {
    var _concat = require_concat();
    var _createPartialApplicator = require_createPartialApplicator();
    var partial = _createPartialApplicator(_concat);
    module.exports = partial;
  }
});

// node_modules/ramda/src/partialRight.js
var require_partialRight = __commonJS({
  "node_modules/ramda/src/partialRight.js"(exports, module) {
    var _concat = require_concat();
    var _createPartialApplicator = require_createPartialApplicator();
    var flip = require_flip();
    var partialRight = _createPartialApplicator(
      flip(_concat)
    );
    module.exports = partialRight;
  }
});

// node_modules/ramda/src/partition.js
var require_partition = __commonJS({
  "node_modules/ramda/src/partition.js"(exports, module) {
    var filter = require_filter2();
    var juxt = require_juxt();
    var reject = require_reject();
    var partition = juxt([filter, reject]);
    module.exports = partition;
  }
});

// node_modules/ramda/src/pathEq.js
var require_pathEq = __commonJS({
  "node_modules/ramda/src/pathEq.js"(exports, module) {
    var _curry3 = require_curry3();
    var equals = require_equals2();
    var path = require_path();
    var pathEq = _curry3(function pathEq2(val, _path, obj) {
      return equals(path(_path, obj), val);
    });
    module.exports = pathEq;
  }
});

// node_modules/ramda/src/pathOr.js
var require_pathOr = __commonJS({
  "node_modules/ramda/src/pathOr.js"(exports, module) {
    var _curry3 = require_curry3();
    var defaultTo = require_defaultTo();
    var path = require_path();
    var pathOr = _curry3(function pathOr2(d, p, obj) {
      return defaultTo(d, path(p, obj));
    });
    module.exports = pathOr;
  }
});

// node_modules/ramda/src/pathSatisfies.js
var require_pathSatisfies = __commonJS({
  "node_modules/ramda/src/pathSatisfies.js"(exports, module) {
    var _curry3 = require_curry3();
    var path = require_path();
    var pathSatisfies = _curry3(function pathSatisfies2(pred, propPath, obj) {
      return pred(path(propPath, obj));
    });
    module.exports = pathSatisfies;
  }
});

// node_modules/ramda/src/pick.js
var require_pick = __commonJS({
  "node_modules/ramda/src/pick.js"(exports, module) {
    var _curry2 = require_curry2();
    var pick = _curry2(function pick2(names, obj) {
      var result = {};
      var idx = 0;
      while (idx < names.length) {
        if (names[idx] in obj) {
          result[names[idx]] = obj[names[idx]];
        }
        idx += 1;
      }
      return result;
    });
    module.exports = pick;
  }
});

// node_modules/ramda/src/pickAll.js
var require_pickAll = __commonJS({
  "node_modules/ramda/src/pickAll.js"(exports, module) {
    var _curry2 = require_curry2();
    var pickAll = _curry2(function pickAll2(names, obj) {
      var result = {};
      var idx = 0;
      var len = names.length;
      while (idx < len) {
        var name = names[idx];
        result[name] = obj[name];
        idx += 1;
      }
      return result;
    });
    module.exports = pickAll;
  }
});

// node_modules/ramda/src/pickBy.js
var require_pickBy = __commonJS({
  "node_modules/ramda/src/pickBy.js"(exports, module) {
    var _curry2 = require_curry2();
    var pickBy = _curry2(function pickBy2(test, obj) {
      var result = {};
      for (var prop in obj) {
        if (test(obj[prop], prop, obj)) {
          result[prop] = obj[prop];
        }
      }
      return result;
    });
    module.exports = pickBy;
  }
});

// node_modules/ramda/src/prepend.js
var require_prepend = __commonJS({
  "node_modules/ramda/src/prepend.js"(exports, module) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var prepend = _curry2(function prepend2(el, list) {
      return _concat([el], list);
    });
    module.exports = prepend;
  }
});

// node_modules/ramda/src/product.js
var require_product = __commonJS({
  "node_modules/ramda/src/product.js"(exports, module) {
    var multiply = require_multiply();
    var reduce = require_reduce();
    var product = reduce(multiply, 1);
    module.exports = product;
  }
});

// node_modules/ramda/src/useWith.js
var require_useWith = __commonJS({
  "node_modules/ramda/src/useWith.js"(exports, module) {
    var _curry2 = require_curry2();
    var curryN = require_curryN2();
    var useWith = _curry2(function useWith2(fn, transformers) {
      return curryN(transformers.length, function() {
        var args = [];
        var idx = 0;
        while (idx < transformers.length) {
          args.push(transformers[idx].call(this, arguments[idx]));
          idx += 1;
        }
        return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
      });
    });
    module.exports = useWith;
  }
});

// node_modules/ramda/src/project.js
var require_project = __commonJS({
  "node_modules/ramda/src/project.js"(exports, module) {
    var _map = require_map();
    var identity = require_identity2();
    var pickAll = require_pickAll();
    var useWith = require_useWith();
    var project = useWith(_map, [pickAll, identity]);
    module.exports = project;
  }
});

// node_modules/ramda/src/internal/_promap.js
var require_promap = __commonJS({
  "node_modules/ramda/src/internal/_promap.js"(exports, module) {
    function _promap(f, g, profunctor) {
      return function(x) {
        return g(profunctor(f(x)));
      };
    }
    module.exports = _promap;
  }
});

// node_modules/ramda/src/internal/_xpromap.js
var require_xpromap = __commonJS({
  "node_modules/ramda/src/internal/_xpromap.js"(exports, module) {
    var _xfBase = require_xfBase();
    var _promap = require_promap();
    var XPromap = function() {
      function XPromap2(f, g, xf) {
        this.xf = xf;
        this.f = f;
        this.g = g;
      }
      XPromap2.prototype["@@transducer/init"] = _xfBase.init;
      XPromap2.prototype["@@transducer/result"] = _xfBase.result;
      XPromap2.prototype["@@transducer/step"] = function(result, input) {
        return this.xf["@@transducer/step"](result, _promap(this.f, this.g, input));
      };
      return XPromap2;
    }();
    function _xpromap(f, g) {
      return function(xf) {
        return new XPromap(f, g, xf);
      };
    }
    module.exports = _xpromap;
  }
});

// node_modules/ramda/src/promap.js
var require_promap2 = __commonJS({
  "node_modules/ramda/src/promap.js"(exports, module) {
    var _curry3 = require_curry3();
    var _dispatchable = require_dispatchable();
    var _promap = require_promap();
    var _xpromap = require_xpromap();
    var promap = _curry3(
      _dispatchable(["fantasy-land/promap", "promap"], _xpromap, _promap)
    );
    module.exports = promap;
  }
});

// node_modules/ramda/src/propEq.js
var require_propEq = __commonJS({
  "node_modules/ramda/src/propEq.js"(exports, module) {
    var _curry3 = require_curry3();
    var prop = require_prop();
    var equals = require_equals2();
    var propEq = _curry3(function propEq2(val, name, obj) {
      return equals(val, prop(name, obj));
    });
    module.exports = propEq;
  }
});

// node_modules/ramda/src/propIs.js
var require_propIs = __commonJS({
  "node_modules/ramda/src/propIs.js"(exports, module) {
    var _curry3 = require_curry3();
    var prop = require_prop();
    var is = require_is();
    var propIs = _curry3(function propIs2(type, name, obj) {
      return is(type, prop(name, obj));
    });
    module.exports = propIs;
  }
});

// node_modules/ramda/src/propOr.js
var require_propOr = __commonJS({
  "node_modules/ramda/src/propOr.js"(exports, module) {
    var _curry3 = require_curry3();
    var defaultTo = require_defaultTo();
    var prop = require_prop();
    var propOr = _curry3(function propOr2(val, p, obj) {
      return defaultTo(val, prop(p, obj));
    });
    module.exports = propOr;
  }
});

// node_modules/ramda/src/propSatisfies.js
var require_propSatisfies = __commonJS({
  "node_modules/ramda/src/propSatisfies.js"(exports, module) {
    var _curry3 = require_curry3();
    var prop = require_prop();
    var propSatisfies = _curry3(function propSatisfies2(pred, name, obj) {
      return pred(prop(name, obj));
    });
    module.exports = propSatisfies;
  }
});

// node_modules/ramda/src/props.js
var require_props = __commonJS({
  "node_modules/ramda/src/props.js"(exports, module) {
    var _curry2 = require_curry2();
    var path = require_path();
    var props = _curry2(function props2(ps, obj) {
      return ps.map(function(p) {
        return path([p], obj);
      });
    });
    module.exports = props;
  }
});

// node_modules/ramda/src/range.js
var require_range = __commonJS({
  "node_modules/ramda/src/range.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isNumber = require_isNumber();
    var range = _curry2(function range2(from, to) {
      if (!(_isNumber(from) && _isNumber(to))) {
        throw new TypeError("Both arguments to range must be numbers");
      }
      var result = [];
      var n = from;
      while (n < to) {
        result.push(n);
        n += 1;
      }
      return result;
    });
    module.exports = range;
  }
});

// node_modules/ramda/src/reduceRight.js
var require_reduceRight = __commonJS({
  "node_modules/ramda/src/reduceRight.js"(exports, module) {
    var _curry3 = require_curry3();
    var reduceRight = _curry3(function reduceRight2(fn, acc, list) {
      var idx = list.length - 1;
      while (idx >= 0) {
        acc = fn(list[idx], acc);
        if (acc && acc["@@transducer/reduced"]) {
          acc = acc["@@transducer/value"];
          break;
        }
        idx -= 1;
      }
      return acc;
    });
    module.exports = reduceRight;
  }
});

// node_modules/ramda/src/reduceWhile.js
var require_reduceWhile = __commonJS({
  "node_modules/ramda/src/reduceWhile.js"(exports, module) {
    var _curryN = require_curryN();
    var _xReduce = require_xReduce();
    var _xwrap = require_xwrap();
    var _reduced = require_reduced();
    var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {
      var xf = _xwrap(function(acc, x) {
        return pred(acc, x) ? fn(acc, x) : _reduced(acc);
      });
      return _xReduce(xf, a, list);
    });
    module.exports = reduceWhile;
  }
});

// node_modules/ramda/src/reduced.js
var require_reduced2 = __commonJS({
  "node_modules/ramda/src/reduced.js"(exports, module) {
    var _curry1 = require_curry1();
    var _reduced = require_reduced();
    var reduced = _curry1(_reduced);
    module.exports = reduced;
  }
});

// node_modules/ramda/src/times.js
var require_times = __commonJS({
  "node_modules/ramda/src/times.js"(exports, module) {
    var _curry2 = require_curry2();
    var times = _curry2(function times2(fn, n) {
      var len = Number(n);
      var idx = 0;
      var list;
      if (len < 0 || isNaN(len)) {
        throw new RangeError("n must be a non-negative number");
      }
      list = [];
      while (idx < len) {
        list.push(fn(idx));
        idx += 1;
      }
      return list;
    });
    module.exports = times;
  }
});

// node_modules/ramda/src/repeat.js
var require_repeat = __commonJS({
  "node_modules/ramda/src/repeat.js"(exports, module) {
    var _curry2 = require_curry2();
    var always = require_always();
    var times = require_times();
    var repeat = _curry2(function repeat2(value, n) {
      return times(always(value), n);
    });
    module.exports = repeat;
  }
});

// node_modules/ramda/src/replace.js
var require_replace = __commonJS({
  "node_modules/ramda/src/replace.js"(exports, module) {
    var _curry3 = require_curry3();
    var replace = _curry3(function replace2(regex, replacement, str) {
      return str.replace(regex, replacement);
    });
    module.exports = replace;
  }
});

// node_modules/ramda/src/internal/_xscan.js
var require_xscan = __commonJS({
  "node_modules/ramda/src/internal/_xscan.js"(exports, module) {
    var _curry3 = require_curry3();
    var _xfBase = require_xfBase();
    var tInit = "@@transducer/init";
    var tStep = "@@transducer/step";
    var XScan = function() {
      function XScan2(reducer, acc, xf) {
        this.xf = xf;
        this.f = reducer;
        this.acc = acc;
      }
      XScan2.prototype[tInit] = function() {
        return this.xf[tStep](this.xf[tInit](), this.acc);
      };
      XScan2.prototype["@@transducer/result"] = _xfBase.result;
      XScan2.prototype[tStep] = function(result, input) {
        if (result["@@transducer/reduced"]) {
          return result;
        }
        this.acc = this.f(this.acc, input);
        return this.xf[tStep](result, this.acc);
      };
      return XScan2;
    }();
    var _xscan = _curry3(function _xscan2(reducer, acc, xf) {
      return new XScan(reducer, acc, xf);
    });
    module.exports = _xscan;
  }
});

// node_modules/ramda/src/scan.js
var require_scan = __commonJS({
  "node_modules/ramda/src/scan.js"(exports, module) {
    var _curry3 = require_curry3();
    var _dispatchable = require_dispatchable();
    var _xscan = require_xscan();
    var scan = _curry3(
      _dispatchable([], _xscan, function scan2(fn, acc, list) {
        var idx = 0;
        var len = list.length;
        var result = [acc];
        while (idx < len) {
          acc = fn(acc, list[idx]);
          result[idx + 1] = acc;
          idx += 1;
        }
        return result;
      })
    );
    module.exports = scan;
  }
});

// node_modules/ramda/src/sequence.js
var require_sequence = __commonJS({
  "node_modules/ramda/src/sequence.js"(exports, module) {
    var _curry2 = require_curry2();
    var ap = require_ap();
    var map = require_map2();
    var prepend = require_prepend();
    var reduceRight = require_reduceRight();
    var identity = require_identity();
    var sequence = _curry2(function sequence2(F, traversable) {
      var of = typeof F["fantasy-land/of"] === "function" ? F["fantasy-land/of"] : typeof F.of === "function" ? F.of : F;
      var TypeRep = {
        "fantasy-land/of": of
      };
      return typeof traversable["fantasy-land/traverse"] === "function" ? traversable["fantasy-land/traverse"](TypeRep, identity) : typeof traversable.traverse === "function" ? traversable.traverse(TypeRep, identity) : reduceRight(function(x, acc) {
        return ap(map(prepend, x), acc);
      }, of([]), traversable);
    });
    module.exports = sequence;
  }
});

// node_modules/ramda/src/set.js
var require_set = __commonJS({
  "node_modules/ramda/src/set.js"(exports, module) {
    var _curry3 = require_curry3();
    var always = require_always();
    var over = require_over();
    var set = _curry3(function set2(lens, v, x) {
      return over(lens, always(v), x);
    });
    module.exports = set;
  }
});

// node_modules/ramda/src/sort.js
var require_sort = __commonJS({
  "node_modules/ramda/src/sort.js"(exports, module) {
    var _curry2 = require_curry2();
    var sort = _curry2(function sort2(comparator, list) {
      return Array.prototype.slice.call(list, 0).sort(comparator);
    });
    module.exports = sort;
  }
});

// node_modules/ramda/src/sortBy.js
var require_sortBy = __commonJS({
  "node_modules/ramda/src/sortBy.js"(exports, module) {
    var _curry2 = require_curry2();
    var sortBy = _curry2(function sortBy2(fn, list) {
      return Array.prototype.slice.call(list, 0).sort(function(a, b) {
        var aa = fn(a);
        var bb = fn(b);
        return aa < bb ? -1 : aa > bb ? 1 : 0;
      });
    });
    module.exports = sortBy;
  }
});

// node_modules/ramda/src/sortWith.js
var require_sortWith = __commonJS({
  "node_modules/ramda/src/sortWith.js"(exports, module) {
    var _curry2 = require_curry2();
    var sortWith = _curry2(function sortWith2(fns, list) {
      return Array.prototype.slice.call(list, 0).sort(function(a, b) {
        var result = 0;
        var i = 0;
        while (result === 0 && i < fns.length) {
          result = fns[i](a, b);
          i += 1;
        }
        return result;
      });
    });
    module.exports = sortWith;
  }
});

// node_modules/ramda/src/split.js
var require_split = __commonJS({
  "node_modules/ramda/src/split.js"(exports, module) {
    var invoker = require_invoker();
    var split = invoker(1, "split");
    module.exports = split;
  }
});

// node_modules/ramda/src/splitAt.js
var require_splitAt = __commonJS({
  "node_modules/ramda/src/splitAt.js"(exports, module) {
    var _curry2 = require_curry2();
    var length = require_length();
    var slice = require_slice();
    var splitAt = _curry2(function splitAt2(index, array) {
      return [slice(0, index, array), slice(index, length(array), array)];
    });
    module.exports = splitAt;
  }
});

// node_modules/ramda/src/splitEvery.js
var require_splitEvery = __commonJS({
  "node_modules/ramda/src/splitEvery.js"(exports, module) {
    var _curry2 = require_curry2();
    var slice = require_slice();
    var splitEvery = _curry2(function splitEvery2(n, list) {
      if (n <= 0) {
        throw new Error("First argument to splitEvery must be a positive integer");
      }
      var result = [];
      var idx = 0;
      while (idx < list.length) {
        result.push(slice(idx, idx += n, list));
      }
      return result;
    });
    module.exports = splitEvery;
  }
});

// node_modules/ramda/src/splitWhen.js
var require_splitWhen = __commonJS({
  "node_modules/ramda/src/splitWhen.js"(exports, module) {
    var _curry2 = require_curry2();
    var splitWhen = _curry2(function splitWhen2(pred, list) {
      var idx = 0;
      var len = list.length;
      var prefix = [];
      while (idx < len && !pred(list[idx])) {
        prefix.push(list[idx]);
        idx += 1;
      }
      return [prefix, Array.prototype.slice.call(list, idx)];
    });
    module.exports = splitWhen;
  }
});

// node_modules/ramda/src/splitWhenever.js
var require_splitWhenever = __commonJS({
  "node_modules/ramda/src/splitWhenever.js"(exports, module) {
    var _curryN = require_curryN();
    var splitWhenever = _curryN(2, [], function splitWhenever2(pred, list) {
      var acc = [];
      var curr = [];
      for (var i = 0; i < list.length; i = i + 1) {
        if (!pred(list[i])) {
          curr.push(list[i]);
        }
        if ((i < list.length - 1 && pred(list[i + 1]) || i === list.length - 1) && curr.length > 0) {
          acc.push(curr);
          curr = [];
        }
      }
      return acc;
    });
    module.exports = splitWhenever;
  }
});

// node_modules/ramda/src/startsWith.js
var require_startsWith = __commonJS({
  "node_modules/ramda/src/startsWith.js"(exports, module) {
    var _curry2 = require_curry2();
    var equals = require_equals2();
    var take = require_take();
    var startsWith = _curry2(function(prefix, list) {
      return equals(take(prefix.length, list), prefix);
    });
    module.exports = startsWith;
  }
});

// node_modules/ramda/src/subtract.js
var require_subtract = __commonJS({
  "node_modules/ramda/src/subtract.js"(exports, module) {
    var _curry2 = require_curry2();
    var subtract = _curry2(function subtract2(a, b) {
      return Number(a) - Number(b);
    });
    module.exports = subtract;
  }
});

// node_modules/ramda/src/swap.js
var require_swap = __commonJS({
  "node_modules/ramda/src/swap.js"(exports, module) {
    var _curry3 = require_curry3();
    var _isArray = require_isArray();
    var _isString = require_isString();
    var clone = require_clone2();
    var swapObject = function(indexA, indexB, o) {
      var copy = clone(o);
      var properties = Object.getOwnPropertyNames(copy);
      if (properties.includes(indexA) && properties.includes(indexB)) {
        var tmp = copy[indexA];
        copy[indexA] = copy[indexB];
        copy[indexB] = tmp;
      }
      return copy;
    };
    var swapList = function(indexA, indexB, list) {
      var length = list.length;
      var result = list.slice();
      var positiveIndexA = indexA < 0 ? length + indexA : indexA;
      var positiveIndexB = indexB < 0 ? length + indexB : indexB;
      var positiveMin = Math.min(positiveIndexA, positiveIndexB);
      var positiveMax = Math.max(positiveIndexA, positiveIndexB);
      if (positiveIndexA < 0 || positiveIndexA > length) {
        return result;
      }
      if (positiveIndexB < 0 || positiveIndexB > length) {
        return result;
      }
      if (positiveIndexA === positiveIndexB) {
        return result;
      }
      result = [].concat(result.slice(0, positiveMin)).concat(result[positiveMax]).concat(result.slice(positiveMin + 1, positiveMax)).concat(result[positiveMin]).concat(result.slice(positiveMax + 1, length));
      return result;
    };
    var swapString = function(indexA, indexB, s) {
      var result = swapList(indexA, indexB, s);
      return _isArray(result) ? result.join("") : result;
    };
    var swap = _curry3(function(indexA, indexB, o) {
      if (_isArray(o)) {
        return swapList(indexA, indexB, o);
      } else if (_isString(o)) {
        return swapString(indexA, indexB, o);
      } else {
        return swapObject(indexA, indexB, o);
      }
    });
    module.exports = swap;
  }
});

// node_modules/ramda/src/symmetricDifference.js
var require_symmetricDifference = __commonJS({
  "node_modules/ramda/src/symmetricDifference.js"(exports, module) {
    var _curry2 = require_curry2();
    var concat = require_concat2();
    var difference = require_difference();
    var symmetricDifference = _curry2(function symmetricDifference2(list1, list2) {
      return concat(difference(list1, list2), difference(list2, list1));
    });
    module.exports = symmetricDifference;
  }
});

// node_modules/ramda/src/symmetricDifferenceWith.js
var require_symmetricDifferenceWith = __commonJS({
  "node_modules/ramda/src/symmetricDifferenceWith.js"(exports, module) {
    var _curry3 = require_curry3();
    var concat = require_concat2();
    var differenceWith = require_differenceWith();
    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith2(pred, list1, list2) {
      return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
    });
    module.exports = symmetricDifferenceWith;
  }
});

// node_modules/ramda/src/takeLastWhile.js
var require_takeLastWhile = __commonJS({
  "node_modules/ramda/src/takeLastWhile.js"(exports, module) {
    var _curry2 = require_curry2();
    var slice = require_slice();
    var takeLastWhile = _curry2(function takeLastWhile2(fn, xs) {
      var idx = xs.length - 1;
      while (idx >= 0 && fn(xs[idx])) {
        idx -= 1;
      }
      return slice(idx + 1, Infinity, xs);
    });
    module.exports = takeLastWhile;
  }
});

// node_modules/ramda/src/internal/_xtakeWhile.js
var require_xtakeWhile = __commonJS({
  "node_modules/ramda/src/internal/_xtakeWhile.js"(exports, module) {
    var _reduced = require_reduced();
    var _xfBase = require_xfBase();
    var XTakeWhile = function() {
      function XTakeWhile2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XTakeWhile2.prototype["@@transducer/init"] = _xfBase.init;
      XTakeWhile2.prototype["@@transducer/result"] = _xfBase.result;
      XTakeWhile2.prototype["@@transducer/step"] = function(result, input) {
        return this.f(input) ? this.xf["@@transducer/step"](result, input) : _reduced(result);
      };
      return XTakeWhile2;
    }();
    function _xtakeWhile(f) {
      return function(xf) {
        return new XTakeWhile(f, xf);
      };
    }
    module.exports = _xtakeWhile;
  }
});

// node_modules/ramda/src/takeWhile.js
var require_takeWhile = __commonJS({
  "node_modules/ramda/src/takeWhile.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xtakeWhile = require_xtakeWhile();
    var slice = require_slice();
    var takeWhile = _curry2(
      _dispatchable(["takeWhile"], _xtakeWhile, function takeWhile2(fn, xs) {
        var idx = 0;
        var len = xs.length;
        while (idx < len && fn(xs[idx])) {
          idx += 1;
        }
        return slice(0, idx, xs);
      })
    );
    module.exports = takeWhile;
  }
});

// node_modules/ramda/src/internal/_xtap.js
var require_xtap = __commonJS({
  "node_modules/ramda/src/internal/_xtap.js"(exports, module) {
    var _xfBase = require_xfBase();
    var XTap = function() {
      function XTap2(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XTap2.prototype["@@transducer/init"] = _xfBase.init;
      XTap2.prototype["@@transducer/result"] = _xfBase.result;
      XTap2.prototype["@@transducer/step"] = function(result, input) {
        this.f(input);
        return this.xf["@@transducer/step"](result, input);
      };
      return XTap2;
    }();
    function _xtap(f) {
      return function(xf) {
        return new XTap(f, xf);
      };
    }
    module.exports = _xtap;
  }
});

// node_modules/ramda/src/tap.js
var require_tap = __commonJS({
  "node_modules/ramda/src/tap.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _xtap = require_xtap();
    var tap = _curry2(
      _dispatchable([], _xtap, function tap2(fn, x) {
        fn(x);
        return x;
      })
    );
    module.exports = tap;
  }
});

// node_modules/ramda/src/internal/_isRegExp.js
var require_isRegExp = __commonJS({
  "node_modules/ramda/src/internal/_isRegExp.js"(exports, module) {
    function _isRegExp(x) {
      return Object.prototype.toString.call(x) === "[object RegExp]";
    }
    module.exports = _isRegExp;
  }
});

// node_modules/ramda/src/test.js
var require_test = __commonJS({
  "node_modules/ramda/src/test.js"(exports, module) {
    var _cloneRegExp = require_cloneRegExp();
    var _curry2 = require_curry2();
    var _isRegExp = require_isRegExp();
    var toString = require_toString2();
    var test = _curry2(function test2(pattern, str) {
      if (!_isRegExp(pattern)) {
        throw new TypeError("‘test’ requires a value of type RegExp as its first argument; received " + toString(pattern));
      }
      return _cloneRegExp(pattern).test(str);
    });
    module.exports = test;
  }
});

// node_modules/ramda/src/andThen.js
var require_andThen = __commonJS({
  "node_modules/ramda/src/andThen.js"(exports, module) {
    var _curry2 = require_curry2();
    var _assertPromise = require_assertPromise();
    var andThen = _curry2(function andThen2(f, p) {
      _assertPromise("andThen", p);
      return p.then(f);
    });
    module.exports = andThen;
  }
});

// node_modules/ramda/src/toLower.js
var require_toLower = __commonJS({
  "node_modules/ramda/src/toLower.js"(exports, module) {
    var invoker = require_invoker();
    var toLower = invoker(0, "toLowerCase");
    module.exports = toLower;
  }
});

// node_modules/ramda/src/toPairs.js
var require_toPairs = __commonJS({
  "node_modules/ramda/src/toPairs.js"(exports, module) {
    var _curry1 = require_curry1();
    var _has = require_has();
    var toPairs = _curry1(function toPairs2(obj) {
      var pairs = [];
      for (var prop in obj) {
        if (_has(prop, obj)) {
          pairs[pairs.length] = [prop, obj[prop]];
        }
      }
      return pairs;
    });
    module.exports = toPairs;
  }
});

// node_modules/ramda/src/toPairsIn.js
var require_toPairsIn = __commonJS({
  "node_modules/ramda/src/toPairsIn.js"(exports, module) {
    var _curry1 = require_curry1();
    var toPairsIn = _curry1(function toPairsIn2(obj) {
      var pairs = [];
      for (var prop in obj) {
        pairs[pairs.length] = [prop, obj[prop]];
      }
      return pairs;
    });
    module.exports = toPairsIn;
  }
});

// node_modules/ramda/src/toUpper.js
var require_toUpper = __commonJS({
  "node_modules/ramda/src/toUpper.js"(exports, module) {
    var invoker = require_invoker();
    var toUpper = invoker(0, "toUpperCase");
    module.exports = toUpper;
  }
});

// node_modules/ramda/src/transduce.js
var require_transduce = __commonJS({
  "node_modules/ramda/src/transduce.js"(exports, module) {
    var _xReduce = require_xReduce();
    var _xwrap = require_xwrap();
    var curryN = require_curryN2();
    var transduce = curryN(4, function transduce2(xf, fn, acc, list) {
      return _xReduce(xf(typeof fn === "function" ? _xwrap(fn) : fn), acc, list);
    });
    module.exports = transduce;
  }
});

// node_modules/ramda/src/transpose.js
var require_transpose = __commonJS({
  "node_modules/ramda/src/transpose.js"(exports, module) {
    var _curry1 = require_curry1();
    var transpose = _curry1(function transpose2(outerlist) {
      var i = 0;
      var result = [];
      while (i < outerlist.length) {
        var innerlist = outerlist[i];
        var j = 0;
        while (j < innerlist.length) {
          if (typeof result[j] === "undefined") {
            result[j] = [];
          }
          result[j].push(innerlist[j]);
          j += 1;
        }
        i += 1;
      }
      return result;
    });
    module.exports = transpose;
  }
});

// node_modules/ramda/src/traverse.js
var require_traverse = __commonJS({
  "node_modules/ramda/src/traverse.js"(exports, module) {
    var _curry3 = require_curry3();
    var map = require_map2();
    var sequence = require_sequence();
    var traverse = _curry3(function traverse2(F, f, traversable) {
      var of = typeof F["fantasy-land/of"] === "function" ? F["fantasy-land/of"] : typeof F.of === "function" ? F.of : F;
      var TypeRep = {
        "fantasy-land/of": of
      };
      return typeof traversable["fantasy-land/traverse"] === "function" ? traversable["fantasy-land/traverse"](TypeRep, f) : typeof traversable.traverse === "function" ? traversable.traverse(TypeRep, f) : sequence(TypeRep, map(f, traversable));
    });
    module.exports = traverse;
  }
});

// node_modules/ramda/src/trim.js
var require_trim = __commonJS({
  "node_modules/ramda/src/trim.js"(exports, module) {
    var _curry1 = require_curry1();
    var ws = "	\n\v\f\r                　\u2028\u2029\uFEFF";
    var zeroWidth = "​";
    var hasProtoTrim = typeof String.prototype.trim === "function";
    var trim = !hasProtoTrim || ws.trim() || !zeroWidth.trim() ? _curry1(function trim2(str) {
      var beginRx = new RegExp("^[" + ws + "][" + ws + "]*");
      var endRx = new RegExp("[" + ws + "][" + ws + "]*$");
      return str.replace(beginRx, "").replace(endRx, "");
    }) : _curry1(function trim2(str) {
      return str.trim();
    });
    module.exports = trim;
  }
});

// node_modules/ramda/src/tryCatch.js
var require_tryCatch = __commonJS({
  "node_modules/ramda/src/tryCatch.js"(exports, module) {
    var _arity = require_arity();
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {
      return _arity(tryer.length, function() {
        try {
          return tryer.apply(this, arguments);
        } catch (e) {
          return catcher.apply(this, _concat([e], arguments));
        }
      });
    });
    module.exports = tryCatch;
  }
});

// node_modules/ramda/src/unapply.js
var require_unapply = __commonJS({
  "node_modules/ramda/src/unapply.js"(exports, module) {
    var _curry1 = require_curry1();
    var unapply = _curry1(function unapply2(fn) {
      return function() {
        return fn(Array.prototype.slice.call(arguments, 0));
      };
    });
    module.exports = unapply;
  }
});

// node_modules/ramda/src/unary.js
var require_unary = __commonJS({
  "node_modules/ramda/src/unary.js"(exports, module) {
    var _curry1 = require_curry1();
    var nAry = require_nAry();
    var unary = _curry1(function unary2(fn) {
      return nAry(1, fn);
    });
    module.exports = unary;
  }
});

// node_modules/ramda/src/uncurryN.js
var require_uncurryN = __commonJS({
  "node_modules/ramda/src/uncurryN.js"(exports, module) {
    var _curry2 = require_curry2();
    var curryN = require_curryN2();
    var uncurryN = _curry2(function uncurryN2(depth, fn) {
      return curryN(depth, function() {
        var currentDepth = 1;
        var value = fn;
        var idx = 0;
        var endIdx;
        while (currentDepth <= depth && typeof value === "function") {
          endIdx = currentDepth === depth ? arguments.length : idx + value.length;
          value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
          currentDepth += 1;
          idx = endIdx;
        }
        return value;
      });
    });
    module.exports = uncurryN;
  }
});

// node_modules/ramda/src/unfold.js
var require_unfold = __commonJS({
  "node_modules/ramda/src/unfold.js"(exports, module) {
    var _curry2 = require_curry2();
    var unfold = _curry2(function unfold2(fn, seed) {
      var pair = fn(seed);
      var result = [];
      while (pair && pair.length) {
        result[result.length] = pair[0];
        pair = fn(pair[1]);
      }
      return result;
    });
    module.exports = unfold;
  }
});

// node_modules/ramda/src/union.js
var require_union = __commonJS({
  "node_modules/ramda/src/union.js"(exports, module) {
    var _concat = require_concat();
    var _curry2 = require_curry2();
    var compose = require_compose();
    var uniq = require_uniq();
    var union = _curry2(
      compose(uniq, _concat)
    );
    module.exports = union;
  }
});

// node_modules/ramda/src/internal/_xuniqWith.js
var require_xuniqWith = __commonJS({
  "node_modules/ramda/src/internal/_xuniqWith.js"(exports, module) {
    var _includesWith = require_includesWith();
    var _xfBase = require_xfBase();
    var XUniqWith = function() {
      function XUniqWith2(pred, xf) {
        this.xf = xf;
        this.pred = pred;
        this.items = [];
      }
      XUniqWith2.prototype["@@transducer/init"] = _xfBase.init;
      XUniqWith2.prototype["@@transducer/result"] = _xfBase.result;
      XUniqWith2.prototype["@@transducer/step"] = function(result, input) {
        if (_includesWith(this.pred, input, this.items)) {
          return result;
        } else {
          this.items.push(input);
          return this.xf["@@transducer/step"](result, input);
        }
      };
      return XUniqWith2;
    }();
    function _xuniqWith(pred) {
      return function(xf) {
        return new XUniqWith(pred, xf);
      };
    }
    module.exports = _xuniqWith;
  }
});

// node_modules/ramda/src/uniqWith.js
var require_uniqWith = __commonJS({
  "node_modules/ramda/src/uniqWith.js"(exports, module) {
    var _curry2 = require_curry2();
    var _dispatchable = require_dispatchable();
    var _includesWith = require_includesWith();
    var _xuniqWith = require_xuniqWith();
    var uniqWith = _curry2(
      _dispatchable([], _xuniqWith, function(pred, list) {
        var idx = 0;
        var len = list.length;
        var result = [];
        var item;
        while (idx < len) {
          item = list[idx];
          if (!_includesWith(pred, item, result)) {
            result[result.length] = item;
          }
          idx += 1;
        }
        return result;
      })
    );
    module.exports = uniqWith;
  }
});

// node_modules/ramda/src/unionWith.js
var require_unionWith = __commonJS({
  "node_modules/ramda/src/unionWith.js"(exports, module) {
    var _concat = require_concat();
    var _curry3 = require_curry3();
    var uniqWith = require_uniqWith();
    var unionWith = _curry3(function unionWith2(pred, list1, list2) {
      return uniqWith(pred, _concat(list1, list2));
    });
    module.exports = unionWith;
  }
});

// node_modules/ramda/src/unless.js
var require_unless = __commonJS({
  "node_modules/ramda/src/unless.js"(exports, module) {
    var _curry3 = require_curry3();
    var unless = _curry3(function unless2(pred, whenFalseFn, x) {
      return pred(x) ? x : whenFalseFn(x);
    });
    module.exports = unless;
  }
});

// node_modules/ramda/src/unnest.js
var require_unnest = __commonJS({
  "node_modules/ramda/src/unnest.js"(exports, module) {
    var _identity = require_identity();
    var chain = require_chain();
    var unnest = chain(_identity);
    module.exports = unnest;
  }
});

// node_modules/ramda/src/until.js
var require_until = __commonJS({
  "node_modules/ramda/src/until.js"(exports, module) {
    var _curry3 = require_curry3();
    var until = _curry3(function until2(pred, fn, init) {
      var val = init;
      while (!pred(val)) {
        val = fn(val);
      }
      return val;
    });
    module.exports = until;
  }
});

// node_modules/ramda/src/unwind.js
var require_unwind = __commonJS({
  "node_modules/ramda/src/unwind.js"(exports, module) {
    var _curry2 = require_curry2();
    var _isArray = require_isArray();
    var _map = require_map();
    var _assoc = require_assoc();
    var unwind = _curry2(function(key, object) {
      if (!(key in object && _isArray(object[key]))) {
        return [object];
      }
      return _map(function(item) {
        return _assoc(key, item, object);
      }, object[key]);
    });
    module.exports = unwind;
  }
});

// node_modules/ramda/src/valuesIn.js
var require_valuesIn = __commonJS({
  "node_modules/ramda/src/valuesIn.js"(exports, module) {
    var _curry1 = require_curry1();
    var valuesIn = _curry1(function valuesIn2(obj) {
      var prop;
      var vs = [];
      for (prop in obj) {
        vs[vs.length] = obj[prop];
      }
      return vs;
    });
    module.exports = valuesIn;
  }
});

// node_modules/ramda/src/view.js
var require_view = __commonJS({
  "node_modules/ramda/src/view.js"(exports, module) {
    var _curry2 = require_curry2();
    var Const = function(x) {
      return {
        value: x,
        "fantasy-land/map": function() {
          return this;
        }
      };
    };
    var view = _curry2(function view2(lens, x) {
      return lens(Const)(x).value;
    });
    module.exports = view;
  }
});

// node_modules/ramda/src/when.js
var require_when = __commonJS({
  "node_modules/ramda/src/when.js"(exports, module) {
    var _curry3 = require_curry3();
    var when = _curry3(function when2(pred, whenTrueFn, x) {
      return pred(x) ? whenTrueFn(x) : x;
    });
    module.exports = when;
  }
});

// node_modules/ramda/src/where.js
var require_where = __commonJS({
  "node_modules/ramda/src/where.js"(exports, module) {
    var _curry2 = require_curry2();
    var _has = require_has();
    var where = _curry2(function where2(spec, testObj) {
      for (var prop in spec) {
        if (_has(prop, spec) && !spec[prop](testObj[prop])) {
          return false;
        }
      }
      return true;
    });
    module.exports = where;
  }
});

// node_modules/ramda/src/whereAny.js
var require_whereAny = __commonJS({
  "node_modules/ramda/src/whereAny.js"(exports, module) {
    var _curry2 = require_curry2();
    var _has = require_has();
    var whereAny = _curry2(function whereAny2(spec, testObj) {
      for (var prop in spec) {
        if (_has(prop, spec) && spec[prop](testObj[prop])) {
          return true;
        }
      }
      return false;
    });
    module.exports = whereAny;
  }
});

// node_modules/ramda/src/whereEq.js
var require_whereEq = __commonJS({
  "node_modules/ramda/src/whereEq.js"(exports, module) {
    var _curry2 = require_curry2();
    var equals = require_equals2();
    var map = require_map2();
    var where = require_where();
    var whereEq = _curry2(function whereEq2(spec, testObj) {
      return where(map(equals, spec), testObj);
    });
    module.exports = whereEq;
  }
});

// node_modules/ramda/src/without.js
var require_without = __commonJS({
  "node_modules/ramda/src/without.js"(exports, module) {
    var _curry2 = require_curry2();
    var _Set = require_Set();
    var reject = require_reject();
    var without = _curry2(function without2(xs, list) {
      var toRemove = new _Set();
      for (var i = 0; i < xs.length; i += 1) {
        toRemove.add(xs[i]);
      }
      return reject(toRemove.has.bind(toRemove), list);
    });
    module.exports = without;
  }
});

// node_modules/ramda/src/xor.js
var require_xor = __commonJS({
  "node_modules/ramda/src/xor.js"(exports, module) {
    var _curry2 = require_curry2();
    var xor = _curry2(function xor2(a, b) {
      return Boolean(!a ^ !b);
    });
    module.exports = xor;
  }
});

// node_modules/ramda/src/xprod.js
var require_xprod = __commonJS({
  "node_modules/ramda/src/xprod.js"(exports, module) {
    var _curry2 = require_curry2();
    var xprod = _curry2(function xprod2(a, b) {
      var idx = 0;
      var ilen = a.length;
      var j;
      var jlen = b.length;
      var result = [];
      while (idx < ilen) {
        j = 0;
        while (j < jlen) {
          result[result.length] = [a[idx], b[j]];
          j += 1;
        }
        idx += 1;
      }
      return result;
    });
    module.exports = xprod;
  }
});

// node_modules/ramda/src/zip.js
var require_zip = __commonJS({
  "node_modules/ramda/src/zip.js"(exports, module) {
    var _curry2 = require_curry2();
    var zip = _curry2(function zip2(a, b) {
      var rv = [];
      var idx = 0;
      var len = Math.min(a.length, b.length);
      while (idx < len) {
        rv[idx] = [a[idx], b[idx]];
        idx += 1;
      }
      return rv;
    });
    module.exports = zip;
  }
});

// node_modules/ramda/src/zipObj.js
var require_zipObj = __commonJS({
  "node_modules/ramda/src/zipObj.js"(exports, module) {
    var _curry2 = require_curry2();
    var zipObj = _curry2(function zipObj2(keys, values) {
      var idx = 0;
      var len = Math.min(keys.length, values.length);
      var out = {};
      while (idx < len) {
        out[keys[idx]] = values[idx];
        idx += 1;
      }
      return out;
    });
    module.exports = zipObj;
  }
});

// node_modules/ramda/src/zipWith.js
var require_zipWith = __commonJS({
  "node_modules/ramda/src/zipWith.js"(exports, module) {
    var _curry3 = require_curry3();
    var zipWith = _curry3(function zipWith2(fn, a, b) {
      var rv = [];
      var idx = 0;
      var len = Math.min(a.length, b.length);
      while (idx < len) {
        rv[idx] = fn(a[idx], b[idx]);
        idx += 1;
      }
      return rv;
    });
    module.exports = zipWith;
  }
});

// node_modules/ramda/src/thunkify.js
var require_thunkify = __commonJS({
  "node_modules/ramda/src/thunkify.js"(exports, module) {
    var curryN = require_curryN2();
    var _curry1 = require_curry1();
    var thunkify = _curry1(function thunkify2(fn) {
      return curryN(fn.length, function createThunk() {
        var fnArgs = arguments;
        return function invokeThunk() {
          return fn.apply(this, fnArgs);
        };
      });
    });
    module.exports = thunkify;
  }
});

// node_modules/ramda/src/index.js
var require_src = __commonJS({
  "node_modules/ramda/src/index.js"(exports, module) {
    module.exports = {};
    module.exports.F = require_F();
    module.exports.T = require_T();
    module.exports.__ = require__();
    module.exports.add = require_add();
    module.exports.addIndex = require_addIndex();
    module.exports.addIndexRight = require_addIndexRight();
    module.exports.adjust = require_adjust();
    module.exports.all = require_all();
    module.exports.allPass = require_allPass();
    module.exports.always = require_always();
    module.exports.and = require_and();
    module.exports.any = require_any();
    module.exports.anyPass = require_anyPass();
    module.exports.ap = require_ap();
    module.exports.aperture = require_aperture2();
    module.exports.append = require_append();
    module.exports.apply = require_apply();
    module.exports.applySpec = require_applySpec();
    module.exports.applyTo = require_applyTo();
    module.exports.ascend = require_ascend();
    module.exports.assoc = require_assoc2();
    module.exports.assocPath = require_assocPath();
    module.exports.binary = require_binary();
    module.exports.bind = require_bind();
    module.exports.both = require_both();
    module.exports.call = require_call();
    module.exports.chain = require_chain();
    module.exports.clamp = require_clamp();
    module.exports.clone = require_clone2();
    module.exports.collectBy = require_collectBy();
    module.exports.comparator = require_comparator();
    module.exports.complement = require_complement2();
    module.exports.compose = require_compose();
    module.exports.composeWith = require_composeWith();
    module.exports.concat = require_concat2();
    module.exports.cond = require_cond();
    module.exports.construct = require_construct();
    module.exports.constructN = require_constructN();
    module.exports.converge = require_converge();
    module.exports.count = require_count();
    module.exports.countBy = require_countBy();
    module.exports.curry = require_curry();
    module.exports.curryN = require_curryN2();
    module.exports.dec = require_dec();
    module.exports.defaultTo = require_defaultTo();
    module.exports.descend = require_descend();
    module.exports.difference = require_difference();
    module.exports.differenceWith = require_differenceWith();
    module.exports.dissoc = require_dissoc2();
    module.exports.dissocPath = require_dissocPath();
    module.exports.divide = require_divide();
    module.exports.drop = require_drop();
    module.exports.dropLast = require_dropLast2();
    module.exports.dropLastWhile = require_dropLastWhile2();
    module.exports.dropRepeats = require_dropRepeats();
    module.exports.dropRepeatsBy = require_dropRepeatsBy();
    module.exports.dropRepeatsWith = require_dropRepeatsWith();
    module.exports.dropWhile = require_dropWhile();
    module.exports.either = require_either();
    module.exports.empty = require_empty();
    module.exports.endsWith = require_endsWith();
    module.exports.eqBy = require_eqBy();
    module.exports.eqProps = require_eqProps();
    module.exports.equals = require_equals2();
    module.exports.evolve = require_evolve();
    module.exports.filter = require_filter2();
    module.exports.find = require_find();
    module.exports.findIndex = require_findIndex();
    module.exports.findLast = require_findLast();
    module.exports.findLastIndex = require_findLastIndex();
    module.exports.flatten = require_flatten();
    module.exports.flip = require_flip();
    module.exports.forEach = require_forEach();
    module.exports.forEachObjIndexed = require_forEachObjIndexed();
    module.exports.fromPairs = require_fromPairs();
    module.exports.groupBy = require_groupBy();
    module.exports.groupWith = require_groupWith();
    module.exports.gt = require_gt();
    module.exports.gte = require_gte();
    module.exports.has = require_has2();
    module.exports.hasIn = require_hasIn();
    module.exports.hasPath = require_hasPath();
    module.exports.head = require_head();
    module.exports.identical = require_identical();
    module.exports.identity = require_identity2();
    module.exports.ifElse = require_ifElse();
    module.exports.inc = require_inc();
    module.exports.includes = require_includes2();
    module.exports.indexBy = require_indexBy();
    module.exports.indexOf = require_indexOf2();
    module.exports.init = require_init();
    module.exports.innerJoin = require_innerJoin();
    module.exports.insert = require_insert();
    module.exports.insertAll = require_insertAll();
    module.exports.intersection = require_intersection();
    module.exports.intersperse = require_intersperse();
    module.exports.into = require_into();
    module.exports.invert = require_invert();
    module.exports.invertObj = require_invertObj();
    module.exports.invoker = require_invoker();
    module.exports.is = require_is();
    module.exports.isEmpty = require_isEmpty();
    module.exports.isNil = require_isNil();
    module.exports.isNotNil = require_isNotNil();
    module.exports.join = require_join();
    module.exports.juxt = require_juxt();
    module.exports.keys = require_keys();
    module.exports.keysIn = require_keysIn();
    module.exports.last = require_last();
    module.exports.lastIndexOf = require_lastIndexOf();
    module.exports.length = require_length();
    module.exports.lens = require_lens();
    module.exports.lensIndex = require_lensIndex();
    module.exports.lensPath = require_lensPath();
    module.exports.lensProp = require_lensProp();
    module.exports.lift = require_lift();
    module.exports.liftN = require_liftN();
    module.exports.lt = require_lt();
    module.exports.lte = require_lte();
    module.exports.map = require_map2();
    module.exports.mapAccum = require_mapAccum();
    module.exports.mapAccumRight = require_mapAccumRight();
    module.exports.mapObjIndexed = require_mapObjIndexed();
    module.exports.match = require_match();
    module.exports.mathMod = require_mathMod();
    module.exports.max = require_max();
    module.exports.maxBy = require_maxBy();
    module.exports.mean = require_mean();
    module.exports.median = require_median();
    module.exports.memoizeWith = require_memoizeWith();
    module.exports.mergeAll = require_mergeAll();
    module.exports.mergeDeepLeft = require_mergeDeepLeft();
    module.exports.mergeDeepRight = require_mergeDeepRight();
    module.exports.mergeDeepWith = require_mergeDeepWith();
    module.exports.mergeDeepWithKey = require_mergeDeepWithKey();
    module.exports.mergeLeft = require_mergeLeft();
    module.exports.mergeRight = require_mergeRight();
    module.exports.mergeWith = require_mergeWith();
    module.exports.mergeWithKey = require_mergeWithKey();
    module.exports.min = require_min();
    module.exports.minBy = require_minBy();
    module.exports.modify = require_modify2();
    module.exports.modifyPath = require_modifyPath();
    module.exports.modulo = require_modulo();
    module.exports.move = require_move();
    module.exports.multiply = require_multiply();
    module.exports.nAry = require_nAry();
    module.exports.partialObject = require_partialObject();
    module.exports.negate = require_negate();
    module.exports.none = require_none();
    module.exports.not = require_not();
    module.exports.nth = require_nth();
    module.exports.nthArg = require_nthArg();
    module.exports.o = require_o();
    module.exports.objOf = require_objOf();
    module.exports.of = require_of();
    module.exports.omit = require_omit();
    module.exports.on = require_on();
    module.exports.once = require_once();
    module.exports.or = require_or();
    module.exports.otherwise = require_otherwise();
    module.exports.over = require_over();
    module.exports.pair = require_pair();
    module.exports.partial = require_partial();
    module.exports.partialRight = require_partialRight();
    module.exports.partition = require_partition();
    module.exports.path = require_path();
    module.exports.paths = require_paths();
    module.exports.pathEq = require_pathEq();
    module.exports.pathOr = require_pathOr();
    module.exports.pathSatisfies = require_pathSatisfies();
    module.exports.pick = require_pick();
    module.exports.pickAll = require_pickAll();
    module.exports.pickBy = require_pickBy();
    module.exports.pipe = require_pipe2();
    module.exports.pipeWith = require_pipeWith();
    module.exports.pluck = require_pluck();
    module.exports.prepend = require_prepend();
    module.exports.product = require_product();
    module.exports.project = require_project();
    module.exports.promap = require_promap2();
    module.exports.prop = require_prop();
    module.exports.propEq = require_propEq();
    module.exports.propIs = require_propIs();
    module.exports.propOr = require_propOr();
    module.exports.propSatisfies = require_propSatisfies();
    module.exports.props = require_props();
    module.exports.range = require_range();
    module.exports.reduce = require_reduce();
    module.exports.reduceBy = require_reduceBy();
    module.exports.reduceRight = require_reduceRight();
    module.exports.reduceWhile = require_reduceWhile();
    module.exports.reduced = require_reduced2();
    module.exports.reject = require_reject();
    module.exports.remove = require_remove();
    module.exports.repeat = require_repeat();
    module.exports.replace = require_replace();
    module.exports.reverse = require_reverse();
    module.exports.scan = require_scan();
    module.exports.sequence = require_sequence();
    module.exports.set = require_set();
    module.exports.slice = require_slice();
    module.exports.sort = require_sort();
    module.exports.sortBy = require_sortBy();
    module.exports.sortWith = require_sortWith();
    module.exports.split = require_split();
    module.exports.splitAt = require_splitAt();
    module.exports.splitEvery = require_splitEvery();
    module.exports.splitWhen = require_splitWhen();
    module.exports.splitWhenever = require_splitWhenever();
    module.exports.startsWith = require_startsWith();
    module.exports.subtract = require_subtract();
    module.exports.sum = require_sum();
    module.exports.swap = require_swap();
    module.exports.symmetricDifference = require_symmetricDifference();
    module.exports.symmetricDifferenceWith = require_symmetricDifferenceWith();
    module.exports.tail = require_tail();
    module.exports.take = require_take();
    module.exports.takeLast = require_takeLast();
    module.exports.takeLastWhile = require_takeLastWhile();
    module.exports.takeWhile = require_takeWhile();
    module.exports.tap = require_tap();
    module.exports.test = require_test();
    module.exports.andThen = require_andThen();
    module.exports.times = require_times();
    module.exports.toLower = require_toLower();
    module.exports.toPairs = require_toPairs();
    module.exports.toPairsIn = require_toPairsIn();
    module.exports.toString = require_toString2();
    module.exports.toUpper = require_toUpper();
    module.exports.transduce = require_transduce();
    module.exports.transpose = require_transpose();
    module.exports.traverse = require_traverse();
    module.exports.trim = require_trim();
    module.exports.tryCatch = require_tryCatch();
    module.exports.type = require_type();
    module.exports.unapply = require_unapply();
    module.exports.unary = require_unary();
    module.exports.uncurryN = require_uncurryN();
    module.exports.unfold = require_unfold();
    module.exports.union = require_union();
    module.exports.unionWith = require_unionWith();
    module.exports.uniq = require_uniq();
    module.exports.uniqBy = require_uniqBy();
    module.exports.uniqWith = require_uniqWith();
    module.exports.unless = require_unless();
    module.exports.unnest = require_unnest();
    module.exports.until = require_until();
    module.exports.unwind = require_unwind();
    module.exports.update = require_update();
    module.exports.useWith = require_useWith();
    module.exports.values = require_values();
    module.exports.valuesIn = require_valuesIn();
    module.exports.view = require_view();
    module.exports.when = require_when();
    module.exports.where = require_where();
    module.exports.whereAny = require_whereAny();
    module.exports.whereEq = require_whereEq();
    module.exports.without = require_without();
    module.exports.xor = require_xor();
    module.exports.xprod = require_xprod();
    module.exports.zip = require_zip();
    module.exports.zipObj = require_zipObj();
    module.exports.zipWith = require_zipWith();
    module.exports.thunkify = require_thunkify();
  }
});

// node_modules/pcg/dist/createPcg.js
var require_createPcg = __commonJS({
  "node_modules/pcg/dist/createPcg.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomList = exports.randomInt = exports.prevState = exports.nextState = exports.stepState = void 0;
    var long_1 = __importDefault(require_umd());
    var ramda_1 = require_src();
    var defaults_1 = require_defaults();
    var types_1 = require_types();
    exports.stepState = (0, ramda_1.curry)((delta, pcg) => {
      let currMultiplier = pcg.algorithm.multiplier;
      const incrementers = {
        [types_1.StreamScheme.SETSEQ]: () => pcg.streamId,
        [types_1.StreamScheme.ONESEQ]: () => pcg.algorithm.increment,
        // TODO: [StreamScheme.UNIQUE]: () => null,
        [types_1.StreamScheme.MCG]: () => long_1.default.fromInt(0, true)
      };
      let currIncrement = incrementers[pcg.algorithm.streamScheme]();
      let accMultiplier = long_1.default.fromInt(1, true);
      let accIncrement = long_1.default.fromInt(0, true);
      for (let remainingDelta = long_1.default.fromValue(delta).toUnsigned(); remainingDelta.gt(0); remainingDelta = remainingDelta.shru(1)) {
        if (remainingDelta.isOdd()) {
          accMultiplier = accMultiplier.mul(currMultiplier);
          accIncrement = accIncrement.mul(currMultiplier).add(currIncrement);
        }
        currIncrement = currMultiplier.add(1).mul(currIncrement);
        currMultiplier = currMultiplier.mul(currMultiplier);
      }
      return {
        ...pcg,
        state: pcg.state.mul(accMultiplier).add(accIncrement)
      };
    });
    exports.nextState = (0, exports.stepState)(1);
    exports.prevState = (0, exports.stepState)(-1);
    exports.randomInt = (0, ramda_1.curry)((min, max, pcg) => {
      const bound = max - min;
      if (bound < 0 || bound >= pcg.algorithm.outputMaxRange)
        throw new RangeError();
      const threshold = (pcg.algorithm.outputMaxRange - bound) % bound;
      let n;
      let nextPcg = pcg;
      do {
        n = long_1.default.fromValue(nextPcg.getOutput(pcg.state));
        nextPcg = (0, exports.nextState)(nextPcg);
      } while (n.lt(threshold));
      return [n.mod(bound).add(min).toNumber(), nextPcg];
    });
    exports.randomList = (0, ramda_1.curry)((length, rng, pcg) => (0, ramda_1.scan)(([, nextPcg]) => rng(nextPcg), rng(pcg), new Array(length - 1)));
    exports.default = (0, ramda_1.curry)(({ numOutputBits, multiplier, increment, outputFns }, { streamScheme = defaults_1.pcgDefaultStreamScheme, outputFnType = defaults_1.pcgDefaultOutputFnType }, initState, initStreamId) => {
      const streamId = long_1.default.fromValue(initStreamId).toUnsigned().shl(1).or(1);
      return (0, exports.nextState)({
        state: streamId.add(initState),
        streamId,
        algorithm: {
          streamScheme,
          outputFnType,
          outputMaxRange: 2 ** numOutputBits,
          multiplier,
          increment
        },
        getOutput: outputFns[outputFnType]
      });
    });
  }
});

// node_modules/pcg/dist/index.js
var require_dist = __commonJS({
  "node_modules/pcg/dist/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPcg32 = exports.randomList = exports.randomInt = exports.prevState = exports.nextState = exports.stepState = void 0;
    var bitwise_1 = require_bitwise();
    var defaults_1 = require_defaults();
    var types_1 = require_types();
    var createPcg_1 = __importDefault(require_createPcg());
    var createPcg_2 = require_createPcg();
    Object.defineProperty(exports, "stepState", { enumerable: true, get: function() {
      return createPcg_2.stepState;
    } });
    Object.defineProperty(exports, "nextState", { enumerable: true, get: function() {
      return createPcg_2.nextState;
    } });
    Object.defineProperty(exports, "prevState", { enumerable: true, get: function() {
      return createPcg_2.prevState;
    } });
    Object.defineProperty(exports, "randomInt", { enumerable: true, get: function() {
      return createPcg_2.randomInt;
    } });
    Object.defineProperty(exports, "randomList", { enumerable: true, get: function() {
      return createPcg_2.randomList;
    } });
    exports.createPcg32 = (0, createPcg_1.default)({
      numOutputBits: 32,
      multiplier: defaults_1.pcgDefaultMultiplier64,
      increment: defaults_1.pcgDefaultIncrement64,
      outputFns: {
        [types_1.OutputFnType.XSH_RR]: (state) => (0, bitwise_1.ror32)(state.shru(59).toInt(), state.shru(18).xor(state).shru(27).toInt())
      }
    });
  }
});

// node_modules/fast-shuffle/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/fast-shuffle/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shuffle = void 0;
    var pcg_1 = require_dist();
    var SEQUENCE = 12345;
    var fisherYatesShuffle = (random) => (sourceArray) => {
      const clone = sourceArray.slice(0);
      let sourceIndex = sourceArray.length;
      let destinationIndex = 0;
      const shuffled = new Array(sourceIndex);
      while (sourceIndex) {
        const randomIndex = random(sourceIndex);
        shuffled[destinationIndex++] = clone[randomIndex];
        clone[randomIndex] = clone[--sourceIndex];
      }
      return shuffled;
    };
    var randomInt = () => Math.random() * 2 ** 32 | 0;
    var randomExternal = (random) => (maxIndex) => random() / 2 ** 32 * maxIndex | 0;
    var randomInternal = (random) => {
      let randState = (0, pcg_1.createPcg32)({}, random, SEQUENCE);
      return (maxIndex) => {
        const [nextInt, nextState] = (0, pcg_1.randomInt)(0, maxIndex, randState);
        randState = nextState;
        return nextInt;
      };
    };
    var randomSwitch = (random) => typeof random === "function" ? randomExternal(random) : randomInternal(random);
    var functionalShuffle = (deck, state) => {
      let randState = (0, pcg_1.createPcg32)({}, state, SEQUENCE);
      const random = (maxIndex) => {
        const [nextInt, nextState] = (0, pcg_1.randomInt)(0, maxIndex, randState);
        randState = nextState;
        return nextInt;
      };
      return [fisherYatesShuffle(random)(deck), (0, pcg_1.randomInt)(0, 2 ** 32 - 1, randState)[0]];
    };
    function fastShuffle(randomSeed, deck) {
      if (typeof randomSeed === "object") {
        const fnDeck = randomSeed[0];
        const fnState = randomSeed[1] ?? randomInt();
        return functionalShuffle(fnDeck, fnState);
      }
      const random = randomSwitch(randomSeed);
      const shuffler = fisherYatesShuffle(random);
      if (deck === void 0)
        return shuffler;
      return shuffler(deck);
    }
    var shuffle = (deck) => fastShuffle(randomInt(), deck);
    exports.shuffle = shuffle;
    exports.default = fastShuffle;
  }
});
export default require_dist2();
/*! Bundled license information:

long/umd/index.js:
  (**
   * @license
   * Copyright 2009 The Closure Library Authors
   * Copyright 2020 Daniel Wirtz / The long.js Authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=fast-shuffle.js.map
